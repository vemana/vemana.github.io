<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://vemana.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://vemana.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-25T19:31:06+00:00</updated><id>https://vemana.github.io/feed.xml</id><title type="html">Vemana’s Space.</title><subtitle>This is Vemana&apos;s space. I write about Topics include Software Engineering, Math, Life and anything that catches my fancy! </subtitle><entry><title type="html">How to run JUnit tests in parallel with Virtual Threads.</title><link href="https://vemana.github.io/blog/2023/junit-parallel-test-runner/" rel="alternate" type="text/html" title="How to run JUnit tests in parallel with Virtual Threads."/><published>2023-12-25T15:00:00+00:00</published><updated>2023-12-25T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/junit-parallel-test-runner</id><content type="html" xml:base="https://vemana.github.io/blog/2023/junit-parallel-test-runner/"><![CDATA[<h2 id="context">Context</h2> <p>I want to run some Java JUnit tests in parallel while retaining one-time static setup. Specifically,</p> <ul> <li>I have an integration test class that spins up a database and performs some tests</li> <li>The test’s <code class="language-plaintext highlighter-rouge">@BeforeClass void spinupDb()</code> spins up a database. I want this to run only once for the entire test class</li> <li>I want the test cases to run in parallel</li> <li>Run under Bazel and JUnit4</li> </ul> <p>Contrast with the standard <code class="language-plaintext highlighter-rouge">JUnit4</code> Runner which executes all the tests serially in the same thread:</p> <ul> <li>The thread Executes the static <code class="language-plaintext highlighter-rouge">@BeforeClass void spinupDb()</code></li> <li>Thereafter, the thread runs each test in serial</li> </ul> <p>The primary motivation to consider parallel runs is to quicken the test feedback cycle.</p> <hr/> <h2 id="options--decision">Options &amp; Decision</h2> <p>Suppose I have 20 test cases and one db spin up (in a one-time, static, setup method) in my test class.</p> <p>The primary options are:</p> <ul> <li>Do nothing and pay for serial execution <ul> <li>Time to completion = Db spin up time + time to complete 20 tests</li> </ul> </li> <li>Use <a href="https://bazel.build/reference/test-encyclopedia#test-sharding">Bazel’s test sharding</a>. With a <code class="language-plaintext highlighter-rouge">shard_count=5</code>, <ul> <li>It splits 20 test cases into 5 shards of 4 each (give or take one or two depending on randomization)</li> <li>Each test shard will spin up the database and then run each of its 4 tests in serial</li> <li>Time to completion = Db spin up time + time to complete 4 tests</li> </ul> </li> <li>Use JUnit’s experimental <a href="https://github.com/junit-team/junit4/blob/main/src/main/java/org/junit/experimental/ParallelComputer.java">Parallel Computer</a>. This meets the spec except that JUnit doesn’t expose a runner like <code class="language-plaintext highlighter-rouge">ParallelRunner</code>. <ul> <li>Time to completion = Db spin up time + time to complete <code class="language-plaintext highlighter-rouge">20/T</code> tests where <code class="language-plaintext highlighter-rouge">T</code> is the number of parallel threads</li> </ul> </li> <li>Roll my own, inspired by <code class="language-plaintext highlighter-rouge">Parallel Computer</code> <ul> <li>And take the opportunity to run using Virtual Threads !</li> <li>Time to completion = Db spin up time + time to complete 1 test</li> </ul> </li> </ul> <p>I chose to roll a new parallel Runner because it meets the spec and I can also use Virtual Threads.</p> <hr/> <h2 id="why-virtual-threads">Why Virtual Threads?</h2> <p>Java Virtual Threads are many things. Perhaps the most well known is their ability to deliver straight-line programs (no Reactive Java please!). Perhaps less well known is its utilization benefits: you can get more out of your servers. Why so? It goes to Little’s law; see <a href="https://www.youtube.com/watch?v=YQ6EpIk7KgY">Ron Pressler’s explanation</a>.</p> <p>Platform Threads (i.e. traditional Java threads) are heavy</p> <ul> <li>They use significant memory</li> <li>Context switching across them is expensive</li> <li>So, there’s an upper bound on number of concurrent threads per core</li> <li>As you approach this bound, the system runs out of memory and/or switching costs dominate the actual useful on-cpu work</li> </ul> <p>Virtual Threads are light</p> <ul> <li>They have small memory footprint (IIRC, a few KB vs a few MB for Platform threads)</li> <li>Switching is quite cheap (since it is done by the JVM not the OS)</li> <li>So, the upper bound on number of concurrent threads is a LOT higher; perhaps 100-1000x higher</li> </ul> <p>In some situations, Virtual Threads can support more load per core</p> <ul> <li>Suppose that you have a workload where each request (runs in a single thread), waits on IO for 199 units and does 1 unit of work</li> <li>In the steady state, assuming zero switching costs and perfect alignment, a core needs to queue 200 threads <ul> <li>Each of the 200 threads is blocked for 199 units, does 1 unit of work and repeats the cycle</li> </ul> </li> <li>Suppose the core can support a max of 100 Platform Threads and 10,000 Virtual Threads</li> <li>To obtain a queue size of 200, you’ll need two cores running Platform Threads vs 1 core running Virtual Threads</li> <li><span style="color:green; font-weight:bold;">In other words, you need fewer servers using Virtual Threads to support the same workload</span></li> </ul> <p>If you have 10 testing boxes running integration tests, it’s plausible you can cut down on a couple using Virtual Threads because</p> <ul> <li>Integration tests with databases could have similar characteristics as the example above</li> <li>Each test waits on database and consumes relatively little CPU (though not as extreme as 1:199)</li> <li>The test’s database consumes CPU but it reads from disk for queries/reads/writes</li> <li>If you run database from memory (instead of disk), thereby IO no longer being bottleneck, memory could become the new bottleneck</li> </ul> <blockquote class="block-warning"> <p>Bottomline: Virtual Threads are worth a try for integration tests.</p> </blockquote> <hr/> <h2 id="code">Code</h2> <p>This is how the test looks. Note the following:</p> <ul> <li>A new Runner, <code class="language-plaintext highlighter-rouge">ParallelTestMethodsRunner</code></li> <li>The test configuration <code class="language-plaintext highlighter-rouge">ParallelTestMethodsConfig</code> which supports two options <ul> <li>Run using Platform Threads (for CPU bound tests)</li> <li>Run using Virtual Threads (for IO bound tests)</li> </ul> </li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">ParallelTestMethodsRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="cm">/*The Runner*/</span>
<span class="c1">// @ParallelTestMethodsConfig(platformThreads = 10) // Option 1: Use 10 Platform Threads</span>
<span class="nd">@ParallelTestMethodsConfig</span><span class="o">(</span><span class="n">useVirtualThreads</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// Option 2: Use Virtual Threads</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDbTest</span> <span class="o">{</span>

  <span class="c1">// Spins up the database; shared by each test case</span>
  <span class="nd">@ClassRule</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">DbTestCase</span> <span class="n">dbTestCase</span> <span class="o">=</span> <span class="nc">DbTestCase</span><span class="o">.</span><span class="na">postgres_15_3</span><span class="o">();</span>

  <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_1</span><span class="o">()</span> <span class="o">{}</span>
  <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_2</span><span class="o">()</span> <span class="o">{}</span>
  <span class="c1">// ...</span>
  <span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_20</span><span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <p>The Runner is fairly trivial to implement based on JUnit’s <code class="language-plaintext highlighter-rouge">Parallel Computer</code>.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Runs test methods in parallel; they all share the same static setup.
 *
 * &lt;p&gt;It is VERY tricky to have parallel tests working because they will run into resource issues.
 * For example, you can quickly run out of database connections if you have 100 tests in parallel
 * and the db has a 100 connection limit. So, in that sense, more coordination is required to have
 * tests run in parallel.
 *
 * &lt;p&gt;Running tests in parallel does have one great advantage: it cuts down iteration time. So, it
 * is a balance and caution should be exercised in choosing this method. Test sharding in Bazel is
 * also a viable alternative except that it uses extra CPU since it repeats the test setup for each
 * shard. So, if you are running on a local workstation, it is perhaps better to iterate using this
 * runner than using Bazel shards.
 *
 * &lt;p&gt;Configuration must be specified via {@link ParallelTestMethodsConfig} annotation on the test
 * class.
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParallelTestMethodsRunner</span> <span class="kd">extends</span> <span class="nc">BlockJUnit4ClassRunner</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="nf">ParallelTestMethodsRunner</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">testClass</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InitializationError</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">testClass</span><span class="o">);</span>
    <span class="nc">ParallelTestMethodsConfig</span> <span class="n">config</span> <span class="o">=</span>
        <span class="nc">Preconditions</span><span class="o">.</span><span class="na">checkNotNull</span><span class="o">(</span>
            <span class="n">testClass</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">ParallelTestMethodsConfig</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
            <span class="s">"%s requires a config annotation of type: %s"</span><span class="o">,</span>
            <span class="nc">ParallelTestMethodsRunner</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">(),</span>
            <span class="nc">ParallelTestMethodsConfig</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">());</span>
    <span class="n">setScheduler</span><span class="o">(</span><span class="k">new</span> <span class="nc">Scheduler</span><span class="o">(</span><span class="n">config</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="cm">/**
   * Configuration for {@link ParallelTestMethodsRunner},
   */</span>
  <span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
  <span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">ParallelTestMethodsConfig</span> <span class="o">{</span>

    <span class="cm">/**
     * The number of threads that methods will be parallelized into. A threadpool Executor will be
     * used to multiplex all the test methods. This value determines the size of the threadpool.
     *
     * &lt;p&gt;A value less than 1 specifies an unbounded threadpool.
     */</span>
    <span class="kt">int</span> <span class="nf">platformThreads</span><span class="o">()</span> <span class="k">default</span> <span class="mi">5</span><span class="o">;</span>

    <span class="cm">/**
     * Whether to use virtual threads. If set, a {@link Executors#newVirtualThreadPerTaskExecutor()}
     * will be used to run the test methods. {@link ParallelTestMethodsConfig#platformThreads()} is
     * not meaningful when this is true.
     */</span>
    <span class="kt">boolean</span> <span class="nf">useVirtualThreads</span><span class="o">()</span> <span class="k">default</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Scheduler</span> <span class="kd">implements</span> <span class="nc">RunnerScheduler</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ExecutorService</span> <span class="n">service</span><span class="o">;</span>

    <span class="nc">Scheduler</span><span class="o">(</span><span class="nc">ParallelTestMethodsConfig</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">service</span> <span class="o">=</span>
          <span class="n">config</span><span class="o">.</span><span class="na">useVirtualThreads</span><span class="o">()</span>
              <span class="o">?</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newVirtualThreadPerTaskExecutor</span><span class="o">()</span>
              <span class="o">:</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">platformThreads</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span>
                     <span class="o">?</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">()</span>
                     <span class="o">:</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">platformThreads</span><span class="o">()));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">finished</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
        <span class="n">service</span><span class="o">.</span><span class="na">awaitTermination</span><span class="o">(</span><span class="nc">Long</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">);</span>
      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">schedule</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="software-engineering"/><category term="software-testing"/><summary type="html"><![CDATA[Using Virtual Threads can deliver more utilization on I/O bound tasks.]]></summary></entry><entry><title type="html">Solving a Functional Equation using Verbal reasoning. International Math Olympiad 2022, Problem 2.</title><link href="https://vemana.github.io/blog/2023/math-fxy-imo2022/" rel="alternate" type="text/html" title="Solving a Functional Equation using Verbal reasoning. International Math Olympiad 2022, Problem 2."/><published>2023-11-22T15:00:00+00:00</published><updated>2023-11-22T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/math-fxy-imo2022</id><content type="html" xml:base="https://vemana.github.io/blog/2023/math-fxy-imo2022/"><![CDATA[<h2 id="context">Context</h2> <p>Suppose you are constrained to solving a math problem purely in your head (no pen/paper). Is it possible to solve a medium hard problem, like say a International Math Olympiad problem? In this post, I’ll show that some times, it is possible to solve problems purely using verbal reasoning. That is, instead of full fledged formal manipulations in your head, you can use simpler, verbal reasoning that still captures the essence which can then be turned into a formal proof later on.</p> <p>Why is this interesting? Right now, LLMs (Large Language Models) are topical and their ‘reasoning’ appears verbal than formal. I don’t know if there’s any real connection, but I thought it was interesting nonetheless. It is also much easier to reason in this domain than otherwise.</p> <h2 id="problem">Problem</h2> <p><em>This is problem #2 from IMO 2022</em></p> <p>Let \(\mathbb{R}^+\) denote the set of positive real numbers. Find all functions \(f : \mathbb{R}^+ \to \mathbb{R}^+\) such that for each \(x \in \mathbb{R}^+\), there is exactly one \(y \in \mathbb{R}^+\) satisfying \(xf (y) + yf (x) \le 2\).</p> <h2 id="solution">Solution</h2> <p>The solution will proceed as a series of observations all done without pen/paper. Some of them will require a deeper understanding of continuous functions to allow for verbal reasoning.</p> <h3 id="notation">Notation</h3> <p>Some notation/terminology</p> <ul> <li>All variables like \(u, v, x, y\) are assumed to be in \(\mathbb{R}^+\).</li> <li>Let’s call \((x, y)\) a <em>matching pair</em> if they satisfy the given functional equation, i.e. \(xf(y) + yf(x) \le 2\).</li> <li>We say \(y\) is \(x\)’s match if \((x, y)\) is a <em>matching pair</em>.</li> </ul> <h3 id="lemma-1">Lemma 1</h3> <blockquote class="block-tip"> <p>If \((x, y)\) is a matching pair, so is \((y, x)\)</p> </blockquote> <p>Obvious since the functional equation is symmetric in \(x\) and \(y\). The implication is that if we find a match for \(x\), say \(X\), then we’ve found the match for \(X\) as well (it is \(x\)).</p> <h3 id="lemma-2">Lemma 2</h3> <blockquote class="block-tip"> <p>If \((x,y)\) is a matching pair, \(\forall Y \neq y\), \((x, Y)\) is not a matching pair</p> </blockquote> <p>Follows from the uniqueness requirement in the problem statement.</p> <h3 id="lemma-3">Lemma 3</h3> <blockquote class="block-tip"> <p>\(f\) is a decreasing function</p> </blockquote> <p><strong>Verbal Reasoning:</strong> Suppose \((V,v)\) is a matching pair. So, \(Vf(v) + f(V)v \le 2\). If both \(f(v)\) and \(v\) simultaneously become smaller, the LHS becomes smaller and stays \(\le 2\) providing another match for \(V\) which is a contradiction. In other words, we can’t have \(f(v') \le f(v) \text{ and } v' \lt v\).</p> <p>Ideally, for the argument to work correctly, I should have said <em>one is smaller (\(v\)) and the other (\(f(v)\)) is not larger</em> but, when reasoning purely in the head, it is helpful to make statements like <em>both simultaneously become smaller</em> over <em>one is smaller and the other is not larger</em>. At least, my brain processes the former easier than the latter. Perhaps because it compresses better.</p> <h3 id="lemma-4">Lemma 4</h3> <blockquote class="block-tip"> <p>\(f\) is a continuous function</p> </blockquote> <p>This is where the verbal-reasoning cracks open the problem. When I was originally reasoning about this (on my train commute), I had this hypothesis that \(f\) is continuous but without access to pen/paper, it was difficult to prove or reason about. The \(\epsilon, \delta\) definition of continuity is hard to apply purely in the head.</p> <p>So, I turned to a different sort of reasoning about continuity that CAN be done in the head.</p> <blockquote class="block-warning"> <p>Definition: A function \(f\) is continuous at \(a\) iff for every \(\epsilon \gt 0, \exists \delta \gt 0\) such that \(|x-a| \lt \delta \implies |f(x)-f(a)| \lt \epsilon\). <br/><br/> The way I read this is: If \(f\) is discontinous at \(a\), there’s some fixed threshold such that there are arbitrary small input changes still produce changes larger than the threshold. This interpretation is accurate and more easy to reason in the head but a further simplification is required to more readily reason. <br/><br/> Introduce notion of Vanishing(ly small)Jump, StepJump &amp; Fixed.</p> <ul> <li>VanishingJump is an arbitrarily small positive jump picked from an infinite set with \(0\) as a limit point.</li> <li>Fixed is any positive constant</li> <li>StepJump is a minimal positive jump. That is, it is some minimal distance away from \(0\). It is not Fixed since it can change based on our choice</li> </ul> <p>Admittedly, these are fuzzy concepts, but they are still quite accurate for our purposes. <br/><br/> It becomes easier to reason if we can do some algebra in our heads:</p> <ul> <li> \[StepJump * Fixed = StepJump\] </li> <li> \[VanishingJump * Fixed = VanishingJump\] </li> <li> \[Fixed + Positive StepJump \gt Fixed\] </li> <li> \[VanishingJump + Fixed \sim Fixed\] </li> </ul> <p>Note the similarity of the algebra with big-oh algebra: \(O(n^2) + O(n) = O(n^2)\) <br/><br/> Finally, it all boils down to this:</p> <ul> <li><strong>\(\text{If } f \text{ is discontinuous at a, then } f(a \pm VanishingJump) = f(a) \pm StepJump\)</strong></li> <li><strong>\(\text{If } f \text{ is continuous at a, then } f(a \pm VanishingJump) = f(a) \pm VanishingJump\)</strong></li> </ul> <p>Obviously, not all VanishingJumps produce StepJumps even at a discontinuity, but we can read it as: <strong>the user can choose VanishingJumps &amp; StepJumps to make the above identities come true.</strong></p> </blockquote> <p>Armed with this simplification, we can now reason. Assume \(f\) is discontinuous at \(a\) and \((a, b)\) is a matching pair. We’ll need to produce a contradiction by utilizing the fact that \(f\) is discontinuous at \(a\).</p> <p>Let’s use \(A = a + VanishingJump\) ! Then, \(f(A) = f(a + VanishingJump) = f(a) - StepJump\) (the \(-\)ve sign is because \(f\) is decreasing as noted in Lemma 3), so that</p> \[\begin{align*} bf(A) + f(b)A &amp; = b(f(a) - StepJump) + f(b)(a + VanishingJump) \\ &amp; = bf(a) + f(b)a - b.StepJump + f(b).VanishingJump \\ &amp; = bf(a) + f(b)a - Fixed.StepJump + Fixed.VanishingJump \\ &amp; = bf(a) + af(b) - StepJump + VanishingJump \\ &amp; \lt bf(a) + f(b)a \\ &amp; \le 2 \\ &amp; \implies \text{(b, A) is a matching pair} \\ &amp; \implies \text{contradiction since (b, a) is already a matching pair!} \end{align*}\] <blockquote class="block-warning"> <p><strong>Verbal Reasoning:</strong> If \(f\) is discontinuous at \(a\), small increase in \(a\) leads to large decreases in \(f(a)\) and we can exploit this fact to find another match for \(b\).</p> </blockquote> <h3 id="lemma-5">Lemma 5</h3> <blockquote class="block-tip"> \[\forall x, xf(x) \ge 1\] </blockquote> <p>Assume contrary, that is, \(\exists a, af(a) \lt 1\).</p> <p>Then, \(af(a) \lt 1 \implies af(a) + f(a)a \lt 2 \implies \text{(a, a) is a matching pair}\).</p> <p>We show that \(a\) has another matching pair \(A\), a contradiction. To do this, we set \(A = a + VanishingJump\).</p> \[\begin{align*} af(A) + f(a)A &amp; = a(f(a) - VanishingJump) + f(a)(a + VanishingJump) \\ &amp; = af(a) + f(a)a - a.VanishingJump + f(a).VanishingJump \\ &amp; = af(a) + f(a)a - fixed.VanishingJump + fixed.VanishingJump \\ &amp; = af(a) + af(a) - VanishingJump + VanishingJump \\ &amp; \lt af(a) + f(a)a \pm VanishingJump \\ &amp; \lt 2 \pm VanishingJump \\ &amp; \le 2 \\ &amp; \implies \text{(a, A) is a matching pair} \\ &amp; \implies \text{contradiction since (a, a) is already a matching pair!} \end{align*}\] <blockquote class="block-warning"> <p><strong>Verbal Reasoning:</strong> In other words, since \(f\) is continuous at \(a\), small increases in \(a\) lead to small decreases in \(f(a)\) and we exploit this fact to find a second match for \(a\).</p> </blockquote> <h3 id="lemma-6">Lemma 6</h3> <blockquote class="block-tip"> \[\forall x, xf(x) \le 1\] </blockquote> <p>Assume otherwise, i.e. \(\exists a, af(a) \gt 1\). Let \((a, b)\) be a matching pair.</p> \[\begin{align*} af(b) + bf(a) &amp; \ge af(a) + bf(b) \text{ [Rearrangement inequality &amp; f decreasing]} \\ &amp; \gt 1 + 1 \text{ [}bf(b) \ge 1 \text{ from Lemma 5]} \\ &amp; \implies \text{(a, b) is NOT a matching pair, a contradiction!} \end{align*}\] <blockquote class="block-warning"> <p><strong>Verbal Reasoning:</strong> If \(af(a) \gt 1\), we exploit that \(f\) is decreasing to invoke Rearrangement inequality.</p> </blockquote> <h3 id="finally">Finally</h3> <p>Putting Lemma 5 and Lemma 6 together, we have the final solution:</p> <blockquote class="block-tip"> <p>\(\forall x, f(x) = 1/x\) is the only solution</p> </blockquote> <h2 id="final-thoughts">Final thoughts</h2> <p>Proving continuity of \(f\) required a deep understanding of continuity and how small changes at a discontinuity can still lead to large changes in the function’s value. Once we created a verbal calculus (VanishingJump &amp; StepJump) around it, it became easier to reason purely in the verbal domain, like <code class="language-plaintext highlighter-rouge">let me perturb the input by a small change and see what happens to the output</code>. This allowed us to show that for a matching pair \((x, y)\), tightness in the form of \(xf(y) = 1\) is required; otherwise <em>nearby perturbations</em> like \((x, y+\epsilon)\) also become matching pairs.</p> <p>This technique of verbal reasoning is not always feasible, of course. But, I’ve found that the ability to reason verbally is invaluable and broadly applicable, especially in software engineering; it appears to be a potent form of intuition.</p> <h2 id="postscript">Postscript</h2> <p>After publishing this post &amp; staring at it, it has occurred to me that continuity is not even required to solve the problem. I suppose it speaks to the power of using all our senses (vision included). The modified proof differs from the proof above like so:</p> <ul> <li>Don’t prove Lemma 4</li> <li>Prove Lemma 5 (i.e. \(\forall x, xf(x) \ge 1\)) without resorting to continuity, just using that \(f\) is decreasing</li> <li>Everything else remains the same</li> </ul> <h3 id="modified-proof-of-lemma-5">Modified proof of Lemma 5</h3> <blockquote class="block-tip"> \[\forall x, xf(x) \ge 1\] </blockquote> <p>Assume contrary, that \(\exists a, af(a) \lt 1\). Then, \(af(a) + f(a)a \lt 2\) meaning \(\text{(a, a) is a matching pair}\).</p> <p>Also,</p> \[\begin{align*} af(a) + f(a)a &amp; \lt 2 \\ &amp; \implies \exists h \gt 0, af(a) + f(a)(a+h) \lt 2 \\ &amp; \implies \exists h \gt 0, af(a+h) + f(a)(a+h) \lt 2 \text{ [since } f(a+h) \lt f(a) \text{ as f is decreasing]} \\ &amp; \implies \text{ (a, a+h) is a matching pair, a contradiction since (a, a) is already a matching pair} \end{align*}\]]]></content><author><name></name></author><category term="math"/><category term="math-verbal"/><summary type="html"><![CDATA[Context]]></summary></entry><entry><title type="html">An interesting series convergence using geometry. Putnam 2021 A3.</title><link href="https://vemana.github.io/blog/2023/math-putnam21.a3/" rel="alternate" type="text/html" title="An interesting series convergence using geometry. Putnam 2021 A3."/><published>2023-11-22T15:00:00+00:00</published><updated>2023-11-22T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/math-putnam21.a3</id><content type="html" xml:base="https://vemana.github.io/blog/2023/math-putnam21.a3/"><![CDATA[<h2 id="context">Context</h2> <p>Series convergence arguments using geometry tend to be particularly beautiful. I came across this a competition problem which admits an unusual, pretty argument.</p> <h2 id="problem">Problem</h2> <p>This is from Putnam 2021, problem A3.</p> <p>Let \(a_0 = \pi/2\) and let \(a_n = sin(a_{n-1})\) for \(n \ge 1\). Determine whether the following series converges:</p> \[\sum_{n=1}^\infty a_n^2\] <h2 id="solution">Solution</h2> <p>This is my handwritten solution; it leaves out some facts without quoting them or proving them (exercise for reader!) such as:</p> <ul> <li>\(a_n\) is monotonically decreasing</li> <li>\(sin(x)/x\) monotonically increases to 1 as x decreases from \(\pi/2 \to 0\) (bounds excluded)</li> <li>\(sin(x) \gt x - x^3/6\) for \(0 \lt x \lt 1\)</li> <li>If a series \(\sum_{n=1}^\infty s_n, s_n \gt 0\) is such that \(\exists p \ge 1: \forall r \ge p, (\sum_{i=r}^\infty s_n) &gt; k\) for some fixed \(k \gt 0\), then the series diverges</li> </ul> <p>The solution converts the recursive structure in \(x_n = sin(x_{n-1})\) to a series of arc lengths on the unit circle and the series sum \(\sum_{n=1}^\infty a_n^2\) can then be compared to the arc areas.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/math-putnam21-a3-solution-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/math-putnam21-a3-solution-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/math-putnam21-a3-solution-1400.webp"/> <img src="/assets/img/math-putnam21-a3-solution.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="math"/><category term="math-series"/><summary type="html"><![CDATA[Context]]></summary></entry><entry><title type="html">How to think about programs &amp;amp; programming? ABIYZ: inspired by age old tools like arithmetic.</title><link href="https://vemana.github.io/blog/2023/abiyz-intro/" rel="alternate" type="text/html" title="How to think about programs &amp;amp; programming? ABIYZ: inspired by age old tools like arithmetic."/><published>2023-11-19T15:00:00+00:00</published><updated>2023-11-19T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/abiyz-intro</id><content type="html" xml:base="https://vemana.github.io/blog/2023/abiyz-intro/"><![CDATA[<h1 id="problem-statement">Problem Statement</h1> <p>A compiler catches errors and more importantly guides us towards syntactically valid programs. Is there a similar guide for thinking about programs &amp; programming? Some thing/process that can help us design systems &amp; program them better ?</p> <h2 id="a-thought-experiment-example">A thought experiment example</h2> <p>Ultimately, programs transform inputs to outputs. Those inputs and outputs have some meaning to humans. Such transforms are common even outside programming; that is, in the real world. We don’t think twice when performing such transforms, but we can learn something by examining one such example in depth.</p> <blockquote class="block-warning"> <p>Problem <code class="language-plaintext highlighter-rouge">Work Desk Area in English</code>: Calculate the surface area of your work desk and express it in words, like <code class="language-plaintext highlighter-rouge">Forty Two</code> or <code class="language-plaintext highlighter-rouge">Sixteen</code>.</p> </blockquote> <p>Your solution likely goes like this:</p> <ol> <li>Model the work desk as a rectangle.</li> <li>Measure the lengths of sides of the desk and consider them to be the rectangle’s dimensions <ul> <li>Capture the dimensions in <code class="language-plaintext highlighter-rouge">PVDS</code> (Place Value Decimal System). Other systems would be possible, for example, binary.</li> </ul> </li> <li>Compute the area using Rectangle’s area formula. <ul> <li>Perform a multiplication of the dimensions in PVDS using some multiplication algorithm</li> <li>The area is now available in PVDS</li> </ul> </li> <li>Take the area in PVDS and announce it in words</li> </ol> <p>We can even <strong>generalize</strong> the solution approach.</p> <pre><code class="language-mermaid">flowchart TD

A[Input] -- Transform --&gt; B[Input]
Y[Output] -- Transform --&gt; Z[Output]

subgraph psd ["Problem Solving Domain"]
B -- Solve --&gt; Y
end

subgraph rwd ["Problem Domain"]
A -. Overall Transform .-&gt; Z
end

psd ~~~~~ rwd
</code></pre> <p>In the <code class="language-plaintext highlighter-rouge">Work Desk area in English</code>, the Problem Solving Domain (i.e. the abstract world) is Geometry &amp; Arithmetic.</p> <pre><code class="language-mermaid">flowchart TD

A[Work Desk] -- Transform --&gt; B[Height &amp; Width in PVDS]
Y[Area expressed in PVDS] -- Transform --&gt; Z[Forty Two]

subgraph psd ["Domain: Geometry &amp; Arithmetic"]
B -- Multiplication --&gt; Y
end

subgraph rwd ["Domain: Work Desk, Words like Forty Two"]
A -. Work Desk area in English .-&gt; Z
end

psd ~~~~~ rwd
</code></pre> <blockquote class="block-tip"> <p>We can <strong>generalize a pattern of problem solving</strong> from the thought experiment:</p> <ul> <li>To solve a problem, we need to utilize general tools (like geometry, arithmetic) <ul> <li><strong>The tools are abstract, human-invented things and only work with human-invented concepts</strong></li> <li>For example, numbers, place value decimal systems, rectangles, multiplication are all abstract concepts/tools</li> </ul> </li> <li>There’s an abstraction corresponding to Input &amp; Output within each of the two domains, Problem domain &amp; Problem solving domain <ul> <li>In the <strong>Problem domain</strong>, the Input is the Work Desk and the output is English words</li> <li>In the <strong>Problem Solving domain</strong>, Input is length &amp; breadth of a rectangle (in PVDS) and the output is an Area (in PVDS)</li> </ul> </li> <li>To solve the problem, the following steps are followed <ul> <li>Input from Problem Domain is converted to Input in Problem Solving Domain</li> <li>The problem is solved in the Problem solving domain <ul> <li>The <code class="language-plaintext highlighter-rouge">Work Desk Area</code> problem is solved by multiplying the length &amp; breadth</li> </ul> </li> <li>Output from Problem Solving Domain is converted to Output in Problem Domain</li> </ul> </li> </ul> </blockquote> <h2 id="abiyz-pattern">ABIYZ pattern</h2> <p>Let’s name this pattern of problem solving since we’ll refer to it later. Let’s call it ABIYZ (for reasons not explained here).</p> <blockquote> <p>Good scientific laws lead to inferring other scientific laws. For example, Ole Roemer inferred that light had finite speed. He deduced this from the observations that eclipses occur at different times than predicted based on Earth’s distance to Jupiter. He held that planetary laws were immutable and looked for a different explanation of the observations.</p> </blockquote> <p>Similar to Roemer’s method, we too would like to hold some tenets of software engineering as immutable so that we can discover others when something doesn’t quite make sense. What are those tenets? Just like the compiler only allows syntactically valid programs, these tenets should lead to clean, explainable programs.</p> <p>I’ve been using ABIYZ as one of those immutable tenets and my experience has been very pleasant. It has helped me in designing clearly and avoiding sphagetti mess in code. I have also found it helpful to understand large frameworks.</p> <h1 id="relevance-for-software-engineering">Relevance for Software Engineering</h1> <p>In the Work Desk example, we used a Problem Solving Domain already available for us (arithmetic, geometry) where as <strong>in programming, we need to invent the Domain and the tools ourself</strong>.</p> <blockquote class="block-tip"> <p>Good software engineering requires inventing the concept of Place Value Decimal System and the Multiplication algorithm to solve the Work Desk Area problem. Numbers and arithmetic is a good problem solving domain for the area problem.</p> </blockquote> <p>Different problems will require different domains. Let’s see some examples.</p> <hr/> <h2 id="example-1">Example 1</h2> <p>Let’s consider implementing the <code class="language-plaintext highlighter-rouge">eval</code> function.</p> <table> <thead> <tr> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Input</td> <td>An expression String, like <code class="language-plaintext highlighter-rouge">(42 * 5) + 3</code></td> </tr> <tr> <td>Output</td> <td>The evaluation result, in words</td> </tr> <tr> <td>Function signature</td> <td><code class="language-plaintext highlighter-rouge">String eval(String expression)</code></td> </tr> <tr> <td>Example</td> <td><code class="language-plaintext highlighter-rouge">eval("(42 * 5) + 3")</code> returns <code class="language-plaintext highlighter-rouge">"Two Hundred And Thirteen"</code></td> </tr> </tbody> </table> <p><br/> To use the ABIYZ pattern,we need to answer a few questions:</p> <table> <thead> <tr> <th>Question</th> <th>Answer</th> </tr> </thead> <tbody> <tr> <td>How’s the input modeled in the PSD (Problem Solving Domain) ?</td> <td>Expression Tree</td> </tr> <tr> <td>How’s the output modeled in the PSD?</td> <td><code class="language-plaintext highlighter-rouge">long</code></td> </tr> <tr> <td>How is “Solve” modeled in PSD?</td> <td><code class="language-plaintext highlighter-rouge">evaluateTree</code> function</td> </tr> <tr> <td>What transforms the Input to PSD from PD?</td> <td><code class="language-plaintext highlighter-rouge">parse</code> function</td> </tr> <tr> <td>What transforms the Output to PD from PSD?</td> <td><code class="language-plaintext highlighter-rouge">toWords</code> function</td> </tr> </tbody> </table> <pre><code class="language-mermaid">flowchart TD
A["`Expression String, e.g. 42*5+3`"] -- parse --&gt; B["`**Expression Tree**, 
e.g. +( *(42, 5), 3)`"]
Y[long, e.g. 213] -- toWords --&gt; Z[English words, e.g. Two Hundred and Thirteen]
subgraph psd ["Problem Solving Domain"]
B -- evaluateTree --&gt; Y
end
subgraph pd ["Problem Domain"]
A -. Evaluate expression &amp; output result in English.-&gt; Z
end
psd ~~~~~ pd
</code></pre> <hr/> <p>Once the ABIYZ questions are answered, we can model the classes &amp; implement the functions:</p> <ul> <li>Classes <ul> <li><code class="language-plaintext highlighter-rouge">ExpressionTree</code></li> </ul> </li> <li>Functions <ul> <li><code class="language-plaintext highlighter-rouge">ExpressionTree parse(String input)</code></li> <li><code class="language-plaintext highlighter-rouge">long evaluateTree(ExpressionTree exprTree)</code></li> <li><code class="language-plaintext highlighter-rouge">String toWords(long value)</code></li> </ul> </li> </ul> <p>The <code class="language-plaintext highlighter-rouge">ExpressionTree</code> class is straightforward</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// An ExpressionTree is either of</span>
<span class="c1">// Addition, Multiplication or just a Number.</span>
<span class="n">sealed</span> <span class="kd">interface</span> <span class="nc">ExpressionTree</span> <span class="o">{</span>
  <span class="n">record</span> <span class="nf">Addition</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Number</span><span class="o">(</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div> <p>The overall <code class="language-plaintext highlighter-rouge">eval</code> function is trivial:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="nf">eval</span><span class="o">(</span><span class="nc">String</span> <span class="n">expression</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">toWords</span><span class="o">(</span><span class="n">evaluateTree</span><span class="o">(</span><span class="n">parse</span><span class="o">(</span><span class="n">expression</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div> <p>The other functions are straightforward too (use any parser combinator or grammar tools for <code class="language-plaintext highlighter-rouge">parse</code> function) and we won’t implement them here.</p> <p><strong>KEY IDEAS</strong></p> <ul> <li>Asking the ABIYZ pattern questions can shed insights on how we think about the problem</li> <li>We invented new concepts (<code class="language-plaintext highlighter-rouge">ExpressionTree</code>) to simplify solving the problem</li> <li>As a bonus, the solution is clean and can be reused effectively. For example, many pieces can be reused for variations of the original problem: <ul> <li>Instead of outputting English Words, output Spanish words <ul> <li>Change the <code class="language-plaintext highlighter-rouge">toWords</code> function to <code class="language-plaintext highlighter-rouge">toSpanishWords</code>, <code class="language-plaintext highlighter-rouge">toEnglishWords</code> etc. Other functions don’t need to change</li> </ul> </li> <li>Instead of accepting a String expression, accept a visual input (i.e. need OCR) <ul> <li>Change the <code class="language-plaintext highlighter-rouge">parse</code> function to <code class="language-plaintext highlighter-rouge">parseOCR</code>. Other functions don’t need to change</li> </ul> </li> </ul> </li> </ul> <hr/> <h2 id="example-2">Example 2</h2> <p>For this example, we’ll diff two json documents, the <code class="language-plaintext highlighter-rouge">jsonDiff</code> function.</p> <table> <thead> <tr> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Input</td> <td>Two Json Strings</td> </tr> <tr> <td>Output</td> <td>A String capturing the diff result (see below)</td> </tr> <tr> <td>Function signature</td> <td><code class="language-plaintext highlighter-rouge">String jsonDiff(String leftJson, String rightJson)</code></td> </tr> </tbody> </table> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Diff output format

leftJson = {
    equal: 42
    unequal: 1
    leftOnly: "abc"
    child: {
        equal: 42
        leftOnly: "abc"
    }
    equalChild: {
        a: 1
        b: "bcd"
    }
    longString: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
}

rightJson = {
    equal: 42
    unequal: 2
    rightOnly: "xyz"    
    child: {
        equal: 42
        rightOnly: "xyz"
    }
    equalChild: {
        a: 1
        b: "bcd"
    }
}

jsonDiff(leftJson, rightJson) returns the following diff output:

!=  ROOT                                                                                        |
  ==  equal                        42                                                           |
  !=  unequal                      1                            | 2                             |
  !=  leftOnly                     "abc"                        | &lt;null&gt;                        |
  !=  rightOnly                    &lt;null&gt;                       | "xyz"                         |
  !=  longString                   "aaaaaaaaaaaaaaaaaaaaaaaaaaa | &lt;null&gt;                        |
                                   aaaaaaaaaaaaaaaaaaaaaaaaaaa" |                               |
  ==  equalChild                   {                                                            |
                                       a: 1                                                     |
                                       b: "bcd"                                                 |
                                   }                                                            |
  !=  child                                                                                     |
    ==  equal                      42                                                           |
    !=  leftOnly                   "abc"                        |  &lt;null&gt;                       |
    !=  rightOnly                  &lt;null&gt;                       |  "xyz"                        |
</code></pre></div></div> <p>For simplicity of exposition, let’s ignore List typed members of the Json (they don’t change the story).</p> <p>The rules of the diff strings are:</p> <ul> <li>There are 4 columns of the output, each of a fixed width. <ul> <li>Indicator, like <code class="language-plaintext highlighter-rouge">==</code> or <code class="language-plaintext highlighter-rouge">!=</code></li> <li>Property name, indented, like <code class="language-plaintext highlighter-rouge">ROOT.child.leftOnly</code></li> <li>Property value on the left side; displayed when there’s a diff</li> <li>Property value on the right side; displayed when there’s a diff</li> <li>Special case: When property values on both sides are equal, display it after merging the columns of the left &amp; right sides</li> <li>Special note: There’s a separator <code class="language-plaintext highlighter-rouge">|</code> between left and right side columns unless they are merged.</li> </ul> </li> <li>Each property will have one horizontal entry (it could span multiple lines like <code class="language-plaintext highlighter-rouge">equalChild</code>)</li> <li>Equal properties have their values displayed. E.g. <code class="language-plaintext highlighter-rouge">equalChild</code> and <code class="language-plaintext highlighter-rouge">equal</code> properties</li> <li>Inequal properties have both sided values displayed. E.g. <code class="language-plaintext highlighter-rouge">unequal</code></li> <li>Properties that occur on only one side should have their values displayed. E.g. <code class="language-plaintext highlighter-rouge">leftOnly</code> &amp; <code class="language-plaintext highlighter-rouge">rightOnly</code>. The special <code class="language-plaintext highlighter-rouge">&lt;null&gt;</code> indicates lack of value for the property. For example, there’s no property named <code class="language-plaintext highlighter-rouge">leftOnly</code> on the right side</li> </ul> <p><br/> To use the ABIYZ pattern,we need to answer a few questions:</p> <table> <thead> <tr> <th>Question</th> <th>Answer</th> </tr> </thead> <tbody> <tr> <td>How’s input json modeled in the PSD (Problem Solving Domain) ?</td> <td>Using <code class="language-plaintext highlighter-rouge">JsonObject</code></td> </tr> <tr> <td>How’s the output modeled in the PSD?</td> <td><code class="language-plaintext highlighter-rouge">TextBlock</code></td> </tr> <tr> <td>How is “solve” modeled in PSD?</td> <td><code class="language-plaintext highlighter-rouge">diffJsonObjects</code> function</td> </tr> <tr> <td>What transforms the Input to PSD from PD?</td> <td><code class="language-plaintext highlighter-rouge">jsonParse</code> function</td> </tr> <tr> <td>What transforms the Output to PD from PSD?</td> <td><code class="language-plaintext highlighter-rouge">TextBlock.toString()</code> method</td> </tr> </tbody> </table> <pre><code class="language-mermaid">flowchart TD
A["`(Json string, Json string)`"] -- jsonParse --&gt; B["`(JsonObject, JsonObject)`"]
Y["`**TextBlock**`"] -- TextBlock.toString() --&gt; Z[diff string]
subgraph psd ["Problem Solving Domain"]
B -- diffJsonObjects --&gt; Y
end
subgraph pd ["Problem Domain"]
A -. Diff two json strings &amp; output them .-&gt; Z
end
psd ~~~~~ pd
</code></pre> <p>We’ve just invented two concepts that we expect will make it easier to solve the problem: <code class="language-plaintext highlighter-rouge">JsonObject</code> &amp; <code class="language-plaintext highlighter-rouge">TextBlock</code>. How do we go about defining them more clearly? We make a few observations:</p> <ul> <li><code class="language-plaintext highlighter-rouge">JsonObject</code> should have at least as much information as the input json strings</li> <li><code class="language-plaintext highlighter-rouge">TextBlock</code> should have at least as much information as the final diff string</li> </ul> <p>What about the operations on these concepts? We make a few more clarifications:</p> <ul> <li>We create a different class for each of these concepts. Lets call them by the same name; so, we have two classes <code class="language-plaintext highlighter-rouge">JsonObject</code> and <code class="language-plaintext highlighter-rouge">TextBlock</code></li> <li>The Operations on our Concepts translate to methods on our Classes.</li> <li>The operations are guided by how <code class="language-plaintext highlighter-rouge">diffJsonObjects</code> will utilize these concepts. <ul> <li>In other words, we are designing the tools (the methods) so that we can utilize them to help solve the problem easier.</li> </ul> </li> </ul> <p>This gives us an outline already.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sealed</span> <span class="kd">interface</span> <span class="nc">JsonObject</span> <span class="o">{</span>

  <span class="c1">// A Json value which happens to be another json</span>
  <span class="n">record</span> <span class="nf">JsonStruct</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">JsonObject</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">JsonObject</span> <span class="o">{</span>
    <span class="c1">// Obtain the value of a given property, if it exists</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">JsonObject</span><span class="o">&gt;</span> <span class="nf">getValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">propertyName</span><span class="o">)</span> <span class="o">{...}</span>

    <span class="c1">// When we compute the diff, we need to inspect every property</span>
    <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">JsonObject</span><span class="o">&gt;&gt;</span> <span class="nf">allChildren</span><span class="o">()</span> <span class="o">{...}</span>
  <span class="o">}</span>

  <span class="c1">// A Json value which happens to be just an integer</span>
  <span class="n">record</span> <span class="nf">JsonInteger</span><span class="o">(</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">JsonObject</span> <span class="o">{}</span>

  <span class="c1">// A Json value which happens to be just a string</span>
  <span class="n">record</span> <span class="nf">JsonString</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">JsonObject</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Note how JsonStruct has methods that are used by <code class="language-plaintext highlighter-rouge">diffJsonObjects</code>. <br/></p> <p>Now, let’s turn to <code class="language-plaintext highlighter-rouge">TextBlock</code>, which models the output diff string. Since it should capture the diff string, its structure should perhaps reflect the composition of the diff string. In other words, if we can express the diff string as being composed out of smaller individual units, we will have modeled <code class="language-plaintext highlighter-rouge">TextBlock</code>.</p> <p>In this image, we can see that the overall diff is composed out of a stack of vertical blocks</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/abiyz-intro-diff-multi-row-composition-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/abiyz-intro-diff-multi-row-composition-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/abiyz-intro-diff-multi-row-composition-1400.webp"/> <img src="/assets/img/abiyz-intro-diff-multi-row-composition.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Each of those vertical blocks is composed out of horizontal blocks</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/abiyz-intro-diff-one-row-composition-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/abiyz-intro-diff-one-row-composition-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/abiyz-intro-diff-one-row-composition-1400.webp"/> <img src="/assets/img/abiyz-intro-diff-one-row-composition.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>There’s recursive structure here &amp; we won’t go into full details but we are now ready to model the <code class="language-plaintext highlighter-rouge">TextBlock</code>.</p> <ul> <li>A <code class="language-plaintext highlighter-rouge">TextBlock</code> is a rectangular block of text</li> <li>Two <code class="language-plaintext highlighter-rouge">TextBlock</code>s can be combined either horizontally or vertically.</li> </ul> <p>That’s all we need to produce the diff string. So, we can now convert it into a simple class definition &amp; operations</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">TextBlock</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="nf">height</span><span class="o">();</span>
  <span class="kt">int</span> <span class="nf">width</span><span class="o">();</span>
  <span class="c1">// Returns the list of lines that this TextBlock consists of</span>
  <span class="c1">// There will be #height() such returned lines</span>
  <span class="c1">// The size of each line will be #width() characters long</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">content</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="nc">TextBlockOperations</span> <span class="o">{</span>
  <span class="c1">// Appends two TextBlocks side by side and returns this newly appended one.</span>
  <span class="c1">// Their top edges will be aligned.</span>
  <span class="c1">// If their bottom edges don't align, the shorter one will grow downwards to align</span>
  <span class="nc">TextBlock</span> <span class="nf">appendHorizontal</span><span class="o">(</span><span class="nc">TextBlock</span> <span class="n">left</span><span class="o">,</span> <span class="nc">TextBlock</span> <span class="n">right</span><span class="o">);</span>

  <span class="c1">// Appends two TextBlocks top to bottom and returns this newly appended one.</span>
  <span class="c1">// Their left edges will be aligned.</span>
  <span class="c1">// If their right edges don't align, the shorter one will grown to the right to align</span>
  <span class="nc">TextBlock</span> <span class="nf">appendVertical</span><span class="o">(</span><span class="nc">TextBlock</span> <span class="n">top</span><span class="o">,</span> <span class="nc">TextBlock</span> <span class="n">bottom</span><span class="o">);</span>

  <span class="c1">// Returns a TextBlock with the specified width and the specified content.</span>
  <span class="c1">// If the content is shorter than width, spaces are used to pad it to 'width'.</span>
  <span class="c1">// If content is larger than width, the TextBlock will keep gaining new height</span>
  <span class="c1">// to accommodate all of the content while never exceeding the width.</span>
  <span class="c1">// So, for width = 3, content = abcdefg, the returned TextBlock will look like</span>
  <span class="c1">// (excluding the enclosing | characters)</span>
  <span class="c1">// |abc|</span>
  <span class="c1">// |def|</span>
  <span class="c1">// |g  |</span>
  <span class="nc">TextBlock</span> <span class="nf">create</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <p>It is straightforward to implement all the relevant functions. In particular, <code class="language-plaintext highlighter-rouge">diffJsonObjects</code> can construct the finall diff <code class="language-plaintext highlighter-rouge">TextBlock</code> by composing it step by step using the composition operations from <code class="language-plaintext highlighter-rouge">TextBlockOperations</code>.</p> <p>This example demonstrates how asking simple questions in the ABIYZ pattern enables us to write clean, modular, functional code. The fact that each of these concepts has its own classes means we can test them independently. For example, whether a TextBlock is implemented correctly has nothing to do with what it is used for (like the diffing here). In other words, the ABIYZ pattern encourages defining independent concepts which can then be tested separately.</p> <h2 id="example-3">Example 3</h2> <p>Consider a person communicating their thoughts with another person via text messaging. There’s ABIYZ hidden here too:</p> <pre><code class="language-mermaid">flowchart TD

A[Thought] -- Encode into SMS --&gt; B[SMS message]
Y[SMS message] -- Decode into thought --&gt; Z[Thought]
subgraph psd ["Problem Solving Domain"]
B -- Send SMS --&gt; Y
end
subgraph rwd ["Problem Domain"]
A -. Communicate Thoughts .-&gt; Z
end
psd ~~~~~ rwd
</code></pre> <p>In fact, we can drill down into this example and ask: <code class="language-plaintext highlighter-rouge">how are SMS getting transmitted?</code>. We can again use ABIYZ to reason about it, recursively. SMS are transformed into a Stream of Bytes which are sent across the network. Again, we can ask, <code class="language-plaintext highlighter-rouge">how are those bytes transferred?</code> and so on so forth until we get all the way down to transistors, then atoms, then subatomic particles etc.</p> <pre><code class="language-mermaid">flowchart TD

A[Thought] --&gt; B[SMS message]
B --&gt; C[Byte Stream]
C --&gt; D[EM Wave]
D -- transmit --&gt; W
W[EM wave] --&gt; X
X[Byte Stream] --&gt; Y
Y[SMS message] --&gt; Z[Thought]


subgraph four ["Electromagnetic waves"]
D
W
end

subgraph three ["Bytes"]
C
X
end

subgraph two ["SMS"]
B
Y
end

subgraph one ["Thoughts"]
A
Z
end

three ~~~~~ four
two ~~~~~ three
one ~~~~~ two
</code></pre> <h2 id="example-4">Example 4</h2> <p>ABIYZ also helps us understand software better. For example, understanding frontend frameworks like Angular (<a href="https://angular.io/docs">documentation</a>) for a beginner can be difficult. But, it can help to think in ABIYZ terms.</p> <p>Consider a website that shows a social media feed. The user sees some pixels corresponding to their social media feed. As the feed changes, the pixels change. Similarly, as the user interacts with the UI(filters/clicks etc), the feed changes. Angular aims to help manage this ping-pong. Looking at the Angular docs can be intimidating, but we can try to understand it better by asking the standard ABIYZ questions: what is the Problem Domain, the Problem Solving Domain and their corresponding concepts &amp; operations?</p> <p>Pretty soon, we get to the ABIYZ graph for a Button Click action. That is, when a user clicks a button, we want to update the UI in response. Typically, this will include fetching new data and/or changing the screen data/layout in response to the newly fetched data.</p> <pre><code class="language-mermaid">flowchart TD

A[Screen] -- Browser Sync --&gt; B[DOM]
B -- Angular Sync --&gt; C[Ng Template, App State]
C -- "Update App State (your code)" --&gt; X
X[Ng Template, Updated App State] -- Angular Sync --&gt; Y
Y[DOM] -- Browser Sync --&gt; Z[Updated Screen]

subgraph three ["Angular"]
C
X
end

subgraph one ["Visual, Biomechanical"]
A -. Clicks a Button .-&gt; Z
end

subgraph two ["Browser API"]
B
Y
end

one ~~~~~ two
two ~~~~~ three
</code></pre> <p>Angular becomes easier to understand &amp; retain once we understand the different domains (User’s senses, Browser, Angular). Angular simply models the DOM as a template with blanks filled from Application State (fancily called <code class="language-plaintext highlighter-rouge">data binding</code>). Your code to respond to the button then just needs to update the Application State and Angular is responsible for syncing it to the DOM. Of course, there is a LOT more to Angular than this, but asking ABIYZ questions provides a good start for understanding it more comprehensively.</p> <h2 id="example-5">Example 5</h2> <p>The <a href="https://truth.dev/">Truth framework</a> is a <code class="language-plaintext highlighter-rouge">Fluent assertions for Java</code>. It allows you to assert in tests, like:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_restaurantQuery</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// retrieve a restaurant by query</span>
    <span class="nc">Restaurant</span> <span class="n">restaurant</span> <span class="o">=</span> <span class="n">queryRestaurants</span><span class="o">(</span><span class="s">"where menuItem contains 'Pizza'"</span><span class="o">).</span><span class="na">firstResult</span><span class="o">();</span>

    <span class="c1">// test that the query actually worked</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">restaurant</span><span class="o">).</span><span class="na">containsMenuItem</span><span class="o">(</span><span class="nc">Pizza</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <p>At first glance, <code class="language-plaintext highlighter-rouge">assertThat(restaurant).containsMenuItem(Pizza)</code> looks somewhat magical. But, ABIYZ again helps us understand.</p> <pre><code class="language-mermaid">flowchart TD

A[Restaurant object] -- toSubject() --&gt; B[RestaurantSubject object]

B -- containsMenuItem(Pizza) --&gt; Y["Boolean (is requirement met?)
&amp;
Failure message (if requirement not met)"
]

Y -- assertTrue() --&gt; Z[Requirement asserted.]

subgraph one ["Domain: Regular Objects"]
A -. Assert requirement that
menu contains Pizza .-&gt; Z
end

subgraph two ["Domain: Truth Subjects"]
B
Y
end

one ~~~~~ two
</code></pre> <p>Essentially, <code class="language-plaintext highlighter-rouge">&lt;X&gt;Subject</code> is a new domain which readily verifies custom conditions on <code class="language-plaintext highlighter-rouge">&lt;X&gt;</code>. Here, <code class="language-plaintext highlighter-rouge">&lt;X&gt;</code> is <code class="language-plaintext highlighter-rouge">Restaurant</code>. For example, if <code class="language-plaintext highlighter-rouge">&lt;X&gt; = List</code>, <code class="language-plaintext highlighter-rouge">ListSubject</code> will have methods that are relevant for verifying the state of the list (but not present in the <code class="language-plaintext highlighter-rouge">List</code> class itself), such as <code class="language-plaintext highlighter-rouge">hasElementsExactlyInOrder(elements)</code>, so you can write <code class="language-plaintext highlighter-rouge">myListSubject.hasElementsExactlyInOrder(1,2,3)</code>. The <code class="language-plaintext highlighter-rouge">ListSubject</code> is reusable across every test class and can provide a ton of methods for typical condition verification.</p> <p>Using the standard ABIYZ pattern, similar to Example #1’s <code class="language-plaintext highlighter-rouge">toWords(evaluateTree(parse(expression))</code>, we can now write <code class="language-plaintext highlighter-rouge">assertTrue(containsMenuItem(toSubject(restaurant), Pizza))</code>. From there, it is a refinement of the API to make it fluent &amp; more user-friendly.</p> <table> <thead> <tr> <th>Different refinements of the assertion API</th> <th>Comment</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">assertTrue(containsMenuItem(toSubject(restaurant), Pizza))</code></td> <td>standard ABIYZ format</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">assertTrue(toSubject(restaurant).containsMenuItem(Pizza))</code></td> <td><code class="language-plaintext highlighter-rouge">containsMenuItem</code> became a method on the Truth subject.<br/>This method is very natural for verifying a <code class="language-plaintext highlighter-rouge">Restaurant</code>’s properties, but it should not be present on the <code class="language-plaintext highlighter-rouge">Restaurant</code> class itself because it is not a top-level property.</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">assertThat(restaurant).containsMenuItem(Pizza)</code></td> <td>A more fluent version of the same content</td> </tr> </tbody> </table> <p><br/> In the actual Truth subject design, <code class="language-plaintext highlighter-rouge">&lt;X&gt;Subject</code> encapsulates not just the object being verified, but also the Failure strategy (quick exit vs report lazily). Hence <code class="language-plaintext highlighter-rouge">assertThat(restaurant)</code> is really a shortcut for <code class="language-plaintext highlighter-rouge">new RestaurantSubject(restaurant, failureStrategy = ASSERT)</code>. In addition, each method can customize the error message; for example the error message for <code class="language-plaintext highlighter-rouge">containsMenuItem(Pizza)</code> should be different from that of <code class="language-plaintext highlighter-rouge">hasFoodInspectionGrade(A)</code>. In short, the <code class="language-plaintext highlighter-rouge">Truth Subject</code> domain has the tools &amp; concepts required for verifying conditions on objects in tests.</p> <p>Setting aside the details, this is another example where ABIYZ helps us understand a framework.</p> <hr/> <h1 id="summary">Summary</h1> <blockquote> <p>The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise. - Dijkstra</p> </blockquote> <p>Perhaps the spirit of the ABIYZ pattern is succinctly captured by the Dijkstra quote. It encourages thinking in terms of different domains. Each domain has its own set of concepts and tools. <strong>We solve problems of one domain by modeling them as problems in another domain</strong> where they are more readily solvable. For a SWE, the challenge is to identify and create these domains in service of the problem at hand. The <code class="language-plaintext highlighter-rouge">diffJsonObjects</code> example demonstrated this thought process.</p> <p>To conclude, ABIYZ pattern of problem solving is a useful thought tool that can simplify designing clean, well-factored, well-tested programs for certain classes of programs. It is likely that software engineers are doing this very particular thing, but in an intuitive way when designing programs/systems. ABIYZ formalizes it so that we can approach even difficult problems logically.</p>]]></content><author><name></name></author><category term="software-engineering"/><category term="software-abiyz"/><summary type="html"><![CDATA[A deep introspection of how we use arithmetic reveals a powerful pattern for programming.]]></summary></entry><entry><title type="html">The Web-scale Software Engineer Skillset</title><link href="https://vemana.github.io/blog/2023/webscale-swe-skillset/" rel="alternate" type="text/html" title="The Web-scale Software Engineer Skillset"/><published>2023-11-19T15:00:00+00:00</published><updated>2023-11-19T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/webscale-swe-skillset</id><content type="html" xml:base="https://vemana.github.io/blog/2023/webscale-swe-skillset/"><![CDATA[<blockquote class="block-danger"> <p>This is a very early draft, incomplete and Work-in-progress. Read at your own risk!</p> </blockquote> <h1 id="what-is-this-about">What is this about?</h1> <p>Colloquially, a <strong>WSE</strong> (Web-scale Software Engineer) is a SWE (Software Engineer) with the skills to work end to end on a large-scale web application. But what topics skills does a WSE need to master or at least be familiar with? In this post, I’ll outline various skills that a WSE may call upon.</p> <h2 id="goal">Goal</h2> <p>If you are a early-career WSE, this post is meant for you. My goal is to accelerate your journey towards becoming a strong WSE. When I say <code class="language-plaintext highlighter-rouge">you</code> in this post, it refers to you, the early-career WSE.</p> <p>For everyone else including expert WSEs or SWEs from other walks, I hope there’s still something of interest for you.</p> <h2 id="format">Format</h2> <p>For each topic, I’ll provide a brief introduction, note some challenges, share my personal observations in dealing with the topic, maybe add some commentary and list some jump-off points for further research.</p> <h2 id="-caution-">!! Caution !!</h2> <p>This post covers a large set of topics, but don’t let it intimidate you. Some things to bear in mind:</p> <ul> <li>The goal for a WSE first and foremost is to solve customer problems. You may need &lt; 10% of these skills or &gt; 90% depending on the actual scenario</li> <li>Likely, you’ll learn best by actually doing. So, it is helpful if you are practising some of these in your day job</li> <li>Learning these topics takes significant, conscious effort. Expertise is only obtained by thinking</li> <li>Have realistic expectations: If you have a day job &amp; family responsibilities, mastering a reasonable portion of these topics can easily take more than a decade</li> </ul> <h2 id="caveats">Caveats</h2> <p>I’ve taken reasonable precautions to only say/link-to thoughts/resources that I genuinely believe in. However, this post represents my experience <strong>and my biases</strong>. As such, you’ll likely find something to disagree with or even something you strongly agree with. I welcome engaging me in (civil) discussion. See <a href="/">about</a> for how to reach me.</p> <h1 id="code">Code</h1> <p>As a WSE</p> <ul> <li>you’ll write a ton of code; you should have a reasonable idea of how to write &amp; structure code <strong>that ages better</strong></li> <li>you’ll deal with many frameworks which can look convoluted and/or daunting; it helps to have a framework to think/reason about them to quickly come upto speed</li> <li>you’ll firefight in production, introduce bugs, fix bugs unrelated to your work, write tests and so on</li> </ul> <p>In this section, I’ll introduce these aspects and some of the challenges you’ll face. To be a master WSE requires expertise in the above topics. Each SWE will develop their own method over time.</p> <h2 id="structure">Structure</h2> <blockquote class="block-warning"> <p>Structure your code coherently.</p> </blockquote> <p>Once your codebase reaches a certain size in terms of files, lines &amp; people working on it, it becomes unweildy to analyze, understand, improve and thus product velocity slows down. Maintaining a healthy codebase is an extremely important WSE skill. But, <em>what is a healthy codebase</em>? Software Engg has many undefined terms such as <em>healthy codebase</em>. To my knowledge, there is no universally accepted definition or even well known candidate definitions. So, everyone reaches their own conclusions over time. However, anecdotally there appears to be a shared kernel across many peole’s intuitive definitions that I share below.</p> <p>Aim for the following standard wrt your code</p> <ul> <li>Given knowledge of what the code does, unfamiliar SWEs should be able to understand HOW it does it</li> <li>Given NO apriori knowledge of what the code does, SWEs should have at least say 50% chance of understanding WHAT the code is doing</li> <li>Unfamiliar SWEs should be able to guess what feature is implemented where in the codebase</li> <li>Code should age well. That is, as more features are built it shouldn’t be necessary to do stop-the-world codebase refactors</li> </ul> <p>This is a pretty high bar and only a small proportion of SWEs will ever reach it. An intermediate milestone is: If you revisit say, a 30K+ line codebase you authored after being away for an year, you should be able to understand every bit of it.</p> <p>Even the intermediate milestone is a pretty high bar and will require repeatable, simple, explainable code structure and patterns.</p> <div class="boxyList"> <p>Resources</p> <p>Definitive resources are hard to find because this is an often overlooked topic. In my practice,</p> <ul> <li>I use the <a href="/blog/2023/abiyz-intro">ABIYZ pattern</a> for structuring code where possible</li> <li>Experience taught me some particularly <a href="/blog/2023/software-changes-and-aging/">bad patterns of code aging</a></li> <li>If you use <a href="https://bazel.build">Bazel</a> as the build tool, <code class="language-plaintext highlighter-rouge">package_groups</code> and <code class="language-plaintext highlighter-rouge">visibilty</code> offer additional options for maintaining a more semantic code structure</li> <li>Unless working on a strongly latency sensitive concern, I use <a href="TODO">TODO: immutability/functional style code</a></li> </ul> </div> <h2 id="frameworks">Frameworks</h2> <blockquote class="block-warning"> <p>Understand frameworks thoroughly.</p> </blockquote> <p>A modern web scale application likely uses several frameworks. Examples include backend frameworks (REST APIs, Authentication etc.), frontend frameworks (Angular, React etc.). Each of those frameworks tends to do a few things very well (its <strong>design center</strong>) and other things not so well. Ideally, you should stick to its design-center, understand it thoroughly and be able to explain it to others.</p> <div class="boxyList"> <p>Resources</p> <p>I am reluctant to list many frameworks because learning specific ones is not the thrust of this particular section. Instead, it is about understanding any framework you may encounter better. I am also not aware of any definitive resources on <code class="language-plaintext highlighter-rouge">how to understand frameworks better</code>.</p> <p><br/></p> <p>In my practice, I find the <a href="/blog/2023/abiyz-intro#example-4">ABIYZ pattern for understanding frameworks</a> useful. Beyond that, I find it helpful to be aware of a large number of ideas from various walks of Computer Science and Engineering - very few ideas are brand new and every new fangled framework has several overlapping ideas from bygone eras.</p> </div> <h2 id="programming-language">Programming Language</h2> <blockquote class="block-warning"> <p>Become an expert at at least one language and stay up-to-date.</p> </blockquote> <p>Language expertise pays for itself through better code, lesser bugs and overall more fun.</p> <h2 id="building">Building</h2> <blockquote class="block-warning"> <p>Aim for deterministic builds.</p> </blockquote> <p>If you work on large projects, Building the code to produce deployable artifacts can itself be a non-deterministic process. Non-determinsm is occasionally a potent enemy and can extract a significant time tax. That said, significant investment in build tooling is only necessary &amp; justified for large scale efforts.</p> <p>In addition to reproducible builds, build systems are differentiated by speed of the build and their ability to change-detect the tests required to run. In the case of some tools like Maven in Java land, builds can be monolithic; that is, the entire project has to be built in order to run a few tests. In such situations, iteration time for <code class="language-plaintext highlighter-rouge">code-compile-test</code> can creep up to unacceptable levels. At that point, as a WSE, you may be compelled to peer into the build system and improve iteration cycle!.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://bazel.build/">Bazel</a> is a highly principled build tool for performing builds at scale with determinism. Diving into its design is a worthwhile activity</li> <li><a href="https://www.pantsbuild.org/">Pants2</a> and <a href="https://github.com/facebook/buck2">Buck2</a> are inspired by Bazel</li> <li>Go and Rust have their own package managers</li> <li>Java has a defacto package manager in Maven</li> </ul> </div> <h2 id="testing">Testing</h2> <blockquote class="block-warning"> <p>Write high quality tests and use continuous testing.</p> </blockquote> <p>As a WSE, you’ll read, write &amp; release a ton of code. You’ll need high quality automated, pre-commit tests to maintain long-term velocity - i.e. ability to add features quickly without breaking existing features. But, what constitutes high quality tests? This is another of those questions that throws practitioners into flame wars. However, there are some thumb rules that I’ve found valuable in my practice.</p> <p>To my knowledge, Software testing still lacks an <strong>objective definition of a Good Test</strong>. That is, a definition which classifies every test as <em>Good</em> or <em>Bad</em>. In practice, that means any definition that classifies say 80% of the tests with 90% agreement among the human raters. In other words, if we give the definition to 100 SWEs (<em>human raters</em>) and ask them to rate a 1000 tests as <em>Good</em> or <em>Bad</em> based on the definition, more than 800 of the tests will have 90 or more human raters classifying one way.</p> <p>Such a definition is critical because it provides clear guidance for every SWE on the team on what tests are acceptable and what are not. It preempts unproductive debates. It is the equivalent of a language-prescribed source formatter (like Golang’s built-in formatter) which preempts formatting debates (2 spaces as indent? 4? etc.) even if it isn’t to the liking of everyone in any particular situation.</p> <p>Nevertheless, you will have to write practically good tests (i.e. ones with a high ratio of value to burden) in order to maintain long-term velocity.</p> <div class="boxyList"> <p>Resources</p> <p>To my knowledge, there aren’t any definitive resources on an objective definition of a <em>Good Test</em>. Nevertheless, there are some important ideas:</p> <ul> <li><a href="https://phauer.com/2019/modern-best-practices-testing-java/">Modern best practices for Java Tests</a> has excellent advice on practical testing</li> <li><a href="https://increment.com/testing/in-praise-of-property-based-testing/">Property based testing</a> is a set of ideas that focuses on the actual contract with minimal distractions</li> </ul> <p>In my practice,</p> <ul> <li>I adopt the definition of <em>Good Test</em> from <a href="TODO">TODO: Objectively Good Tests</a> and utilize the practical techniques there-in</li> <li>I attempt to use <a href="/blog/2023/testing-calculator-homomorphism/">homomorphic</a> code structure in order to segment the tests while maintaining 100% coverage</li> </ul> </div> <h2 id="error-handling">Error Handling</h2> <blockquote class="block-warning"> <p>Treat Error paths and outcomes as first class citizens. Error message should tell you what’s wrong most of the time.</p> </blockquote> <p>A good thumbrule is that error messages should explain what is wrong and attach context variables that led to the error. That is, using a debugger should not be required in most cases. Useful error contexts would include variables across many stack frames (especially the stack frames which are in the middle of a loop) and the stack trace itself. Attaching sufficient context is much harder than one thinks. In languages such as Java/C#, exceptions can also be a double edged sword.</p> <div class="boxyList"> <p>Resources</p> <p>This is yet another of relative controversy with no clear consensus. In a way, Error Handling is also in a similar boat to Testing in that there is no accepted objective definition of <em>Good Error Handling</em>. Still there are some important thoughts that can help the practical burden.</p> <ul> <li>Midori’s <a href="https://joeduffyblog.com/2016/02/07/the-error-model/">The Error Model</a> is perhaps a one-stop read into the history of error handling in programming languages and the relative pros/cons of the various approaches</li> <li><a href="https://stackify.com/best-practices-exceptions-java/">Error handling Hygiene</a> has some standard best practices focused on Java, but it does not define what <em>Good Error Handling</em> is</li> <li>In my practice, I aim for <a href="TODO">TODO: practical error handling in Java</a> practices.</li> </ul> </div> <h2 id="style-functional-vs-imperative">Style: Functional vs Imperative</h2> <blockquote class="block-warning"> <p>Use a functional style of coding unless you have strong reasons not to (for example, extreme performance requirements).</p> </blockquote> <p>At first, for SWEs used to imperative programming, this style may be a bit unusual, but if my experience is any guide, functional code tends to be <em>much</em> less buggy and composes far better. There is additional expense in the form of upfront time to write the code, but amortized over a lifetime (in reduced maintenance/readability costs for e.g.), the benefits appear strongly skewed towards immutability.</p> <p>It could be confirmation bias on my end, but Software engineering appears to be moving in the direction of preferring functional coding style characterized by most objects being immutable (among other things) and first class functions (lambdas). The design of several successful libraries (Java Streams, Google Guava) reflect this preference and several languages are evolving in this direction (Rust and Java with pattern matching for example, C++ with lambdas).</p> <p>Note that I am not recommending slavishly adhering to functional style, merely that functional seems a better default choice than imperative.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://learn.microsoft.com/en-us/dotnet/standard/linq/functional-vs-imperative-programming">Functional vs Imperative Programming</a></li> <li><a href="https://www.cs.cmu.edu/~rwh/students/okasaki.pdf">Okasaki’s Purely Functional Datastructures</a> is a classic read</li> <li>Phil Bagwell’s <a href="https://idea.popcount.org/2012-07-25-introduction-to-hamt/triesearches.pdf">Fast And Space Efficient Trie Searches</a> inspires Clojure’s high performance functional datastructures. A couple of related talks</li> <li>Mohit Thatte’s talk: <a href="https://youtu.be/7BFF50BHPPo">Deep Dive into Clojure’s Data Structures</a></li> <li>Phil Bagwell’s talk: <a href="https://youtu.be/K2NYwP90bNs">Striving to Make Things Simple And Fast</a></li> <li><a href="https://michael.steindorfer.name/publications/phd-thesis-efficient-immutable-collections.pdf">Efficient Immutable Collections PhD thesis</a> and a <a href="https://www.youtube.com/watch?v=pUXeNAeyY34">corresponding talk</a> claims datastructure performance improvements</li> </ul> <p>In my practice</p> <ul> <li>I rely on ideas from <a href="/TODO">TODO: How I reduce mutability</a></li> </ul> </div> <h2 id="releasing">Releasing</h2> <blockquote class="block-warning"> <p>Aim for the ability to release often, preferably 4 times a week, within reason. Not every product needs or even wants (for e.g. financial exchange software) this frequency of releases.</p> </blockquote> <p>As a WSE, you’ll release a lot of features over time. Having a predictable and fast release schedule allows for quick feedback and removal of transient compatibility-related glue. So, you’ll need to stay disciplined with continuous releases. Ideally, your releases are fully automated on a predictable schedule with the ability to even consider daily releases. While it may seem courageous to be releasing everyday, remember that lower frequency releases tend to result in significant amount of cherry picking, compatibility issues and overall lower quality releases.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://docs.github.com/en/actions">Github Actions</a></li> </ul> </div> <h1 id="backend-systems">Backend Systems</h1> <p>As a WSE, you’ll need to interface with many backend systems. For example, you may need to work with a distributed database (potentially inconsistently replicated), a pub-sub message queue, asynchronous data syncs among others. Many concerns emerge from this.</p> <h2 id="design-center">Design Center</h2> <blockquote class="block-warning"> <p>Understand the <strong>Design Center</strong> of backend Systems.</p> </blockquote> <p>Each backend system has its own <code class="language-plaintext highlighter-rouge">design center</code>, that is, a purpose where it is a perfect fit. You have to understand the mental models of each of these systems and factor them into your design. In addition, you’ll need to understand iterative design. It is not feasible to deliver all the pieces of a design upfront. So, you’ll need to monitor some metrics that you know will not be at-target at launch but can be improved over time. The initial design should perhaps favor time to market <strong>without</strong> closing doors on features that didn’t make the launch cutoff.</p> <p>Some standard system types whose Design Centers you should know about:</p> <ul> <li>Scalable Key Value stores: Bigtable, DynamoDb etc.</li> <li>In-memory stores: Redis, MemoryDb etc</li> <li>Big file sytems: Ceph, S3, Google Colossus etc</li> <li>Map-reduce: Cloud Dataflow</li> <li>Real-time processing: Kafka</li> <li>Vertical relational databases: Oracle, Postgresql etc</li> <li>Distributed relational databases: Spanner, Cockroachdb, Yugabytedb etc.</li> <li>Pubsub</li> </ul> <h2 id="design-simplicity">Design Simplicity</h2> <blockquote class="block-warning"> <p>Keep it simple: Bound design complexity. Simplicity is HARD.</p> </blockquote> <p>One of the most common temptations is to explode the number of tools used. While there are merits to this - <code class="language-plaintext highlighter-rouge">one tool, one purpose</code> is appealing - complexity increases super-linearly in the number of distinct concepts (or tools) used in an architecture. There’s a natural tension between using different tools and using the same tool beyond its design center. For example, one can simulate a simple pub-sub using database tables and some Sql. When to use this vs a real pub-sub system is a judgment call that has to be honed with experience and informed by the circumstances of the current situation. If you have a growing team, adding new concepts doesn’t scale well and you’ll likely end up with hotspots: a few SWEs who know about all the concepts and everybody else is constantly going to them for information/advice. This dynamic tends to break under its own weight.</p> <p>Overall, it is important to not overdo systems/tools usage. This judgment takes time and experience.</p> <h2 id="vertical-relational-databases">Vertical Relational Databases</h2> <blockquote class="block-warning"> <p>Understand every aspect of Relational Databases thoroughly.</p> </blockquote> <p>One might feel that Vertical RDBMs are legacy and don’t apply to WSEs. But, that’s far from the truth. Many enterprise systems of large scale run on top of Vertical RDBMSs. Their importance really couldn’t be overstated.</p> <p>Databases are a <strong>vast</strong> topic and understanding it means forming a mental model by which one can utilize them effectively: for e.g. efficient querying, avoiding inconsistencies, using transactions etc. Vertical databases (like Oracle, PostgreSQL) are still the most common form of database (often with flavors of some replication/sharding).</p> <p>Here are some (non-exhaustive) topics to understand in depth, in no particular order:</p> <ul> <li>Indexes &amp; Querying: how a database uses Indexes to query effectively</li> <li>Schema design: Access pattern friendly design, Relational vs Key-value specific design</li> <li>Transactions: Optimistic &amp; Pessimistic transactions</li> <li>Replication: Does the db support replication? If so, what kind of consistency does it offer?</li> <li>Sharding: Does the db support sharding? If so, how is it managed (auto vs manual)?</li> <li>Snapshots: How do you get a point-in-time snapshot of the database for offline processing ?</li> </ul> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://research.google/pubs/f1-a-distributed-sql-database-that-scales/">F1 Distributed Query Execution Paper</a> is a useful primer into how SQL execution works. Even though this is in the distributed setting, vertical dbs work reasonably similarly</li> <li><a href="http://infolab.stanford.edu/~ullman/dscb.html">Database Systems: The Complete Book</a>. For gaining mastery of databases, it is helpful to complement practical experience with a textbook</li> <li><a href="https://www.postgresql.org/">Postgres</a></li> </ul> </div> <h2 id="distributed-relational-databases">Distributed Relational Databases</h2> <blockquote class="block-warning"> <p>Develop a mental model for Consistency and appreciate the different bottlenecks (compared to Vertical RDBs) in reads, writes &amp; queries due to their distributed nature.</p> </blockquote> <p>All the same concerns as Vertical Databases apply, but Distributed Databases (e.g. CockroachDb, Spanner) are noticeably different. For example, consistency models, distributed sql execution, automatic sharding, tracing sql execution etc. make for a different experience using them compared to regular vertical databases.</p> <p>Their APIs are also different. For example, Spanner due to its external consistency offers a more high fidelity API (one that reflects the distributed nature of it) than a vertical database which also happens to be sharded/replicated.</p> <p>Distributed Relational Databases are here and they have a reasonable chance of becoming the databases of choice in the future, even potentially nudging out Key-Value stores of most kinds. So, mastering them can be a significant advantage.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://raft.github.io/raft.pdf">Raft Paper</a> is a must read for a gentle introduction to Consensus and State Machine Replication</li> <li><a href="https://cloud.google.com/spanner">Spanner</a></li> <li><a href="https://cloud.google.com/spanner/docs/true-time-external-consistency">Spanner external consistency</a></li> <li><a href="https://www.cockroachlabs.com/blog/consistency-model/">Cockroach DB’s consistency model</a> is a great read into important concerns like Linearizability</li> <li><a href="https://www.cockroachlabs.com/blog/db-consistency-isolation-terminology/">Db Consistency &amp; Isolation Terminology</a></li> <li><a href="https://jepsen.io/consistency">Jepsen Consistency Models</a>. Clickable map of various terms.</li> <li><a href="https://www.yugabyte.com/blog/low-latency-reads-in-geo-distributed-sql-with-raft-leader-leases/">Raft leader leases for low latency reads</a></li> <li><a href="https://www.youtube.com/watch?v=YqNGbvFHoKM">Hybrid clocks 1</a> and <a href="https://www.yugabyte.com/blog/evolving-clock-sync-for-distributed-databases/">Hybrid Clocks 2</a> when atomic clocks like Spanner TrueTime are not available</li> <li><a href="http://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf">Herlihy and Wing’s Linearizability paper</a></li> <li><a href="https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol">FaunaDb’s commit protocol explained</a></li> <li><a href="https://research.google/pubs/f1-a-distributed-sql-database-that-scales/">F1 Distributed Query Execution Paper</a> is a useful primer into how SQL execution works. Even though this is in the distributed setting, vertical dbs work reasonably similarly</li> </ul> </div> <h2 id="non-relational-distributed-databases-nosql">Non-relational Distributed Databases (NoSQL)</h2> <blockquote class="block-warning"> <p>Have them in your toolkit and thoroughly understand the trade-offs they present.</p> </blockquote> <p>As a WSE, you should understand the trade-offs they present: they provide scale by restricting themselves to limited transaction semantics (say only a single key can be atomically updated) and limited SQL query support (which explains NoSql). These limitations can surprise down the line and will present difficult design decisions upfront; for example, often these dbs don’t often support transactions across multiple tables; so, schema design can require some denormalization which can cause long-term tech debt. In addition, some kinds of queries either will not be supported or will be slow and this too can be surprising. In other words, if you are early on in your application, it is possible that these stores are not flexible enough to accommodate new access patterns, but for a mature use case one can design reasonable schemas.</p> <p>In many ways, they are being usurped by Distributed Relational Databases which are now capable of offering similar scale alongside transactional semantics as well as efficient SQL, but possibly at a higher price point.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-general-nosql-design.html">NoSQL Design Primer</a></li> <li><a href="https://www.scylladb.com/product/technology/shard-per-core-architecture">ScyllaDb’s per-core design</a></li> </ul> </div> <h2 id="in-memory-databases">In-memory Databases</h2> <blockquote class="block-warning"> <p>Be aware of them; uncommon, but some domains require them.</p> </blockquote> <p>Specifically, in the case of real-time writes and reads - for example, real time ad bidding - in memory stores with durable persistence are valuable. The main trade-off is limited scalability since the entire dataset is in memory all the time. So, typical architectures may use them for ephemeral data with some backup to another traditional high-capacity database/warehouse.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://aws.amazon.com/memorydb/">Amazon MemoryDb</a>, which is a sharded, persistent offering on top of Redis</li> <li><a href="https://www.voltactivedata.com/">VoltDb</a></li> </ul> </div> <h2 id="data-warehouses--lakehouses">Data Warehouses &amp; Lakehouses</h2> <blockquote class="block-warning"> <p>Essential for insights. SQL is your friend.</p> </blockquote> <p>Data warehouses are typically append-only flexibly structured data. They contain both business data (how many clicks did a particular Ad receive) and application telemetry (how long did a user spend on a form on the webpage). Business metrics, User experience metrics etc are powered by such warehouses.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://www.databricks.com/product/data-lakehouse">Databricks Lakehouse</a></li> <li><a href="https://cloud.google.com/bigquery?hl=en">Google BigQuery</a></li> <li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36632.pdf">Columnar Storage format</a> from original Google Dremel paper and a <a href="https://blog.twitter.com/engineering/en_us/a/2013/dremel-made-simple-with-parquet">more accessible explanation</a></li> </ul> </div> <h2 id="object-storage">Object storage</h2> <blockquote class="block-warning"> <p>Object storage ~ Giant filesystems. Understand their performance characteristics.</p> </blockquote> <p>As a WSE, you will mostly interact with various kinds of high-level data storage systems like databases &amp; warehouses, but occasionally, you’ll need a lower level file storage. For example, you want to put a ton of files somewhere, highly available. Object storage is the preferred approach for such use cases. Their design center is around overwrite-few, update-few, read-many-sequentially data.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://aws.amazon.com/s3/">Amazon S3</a></li> <li><a href="https://cloud.google.com/storage?hl=en">Google Cloud Storage</a></li> <li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">Google File System original paper</a></li> <li><a href="https://ceph.io/en/">Ceph</a> for self hosting</li> </ul> </div> <h1 id="performance">Performance</h1> <p>Understand the various aspects of performance and have the skills to optimize for them.</p> <p>There are many aspects to performance: throughput, latency &amp; economics to name a few. Different skills are required to optimize along these different aspects. Depending upon the nature and maturity of your product and your company’s resources, you may be called upon to optimize on any of these different dimensions.</p> <h2 id="hardware">Hardware</h2> <blockquote class="block-warning"> <p>Know it and make better performance choices.</p> </blockquote> <p>Even if it is unlikely that a WSE will ever interface directly with hardware, there’ll be times that performance matters above all. In such scenarios, it is crucial to understand how hardware works and to write code that is sympathetic to it. In general, you’ll be interfacing with high performance libraries rather than writing low level code, but it it still cruical in order to utilize these libraries well.</p> <p>In no particular order, it is important to understand:</p> <ul> <li>Relative speeds of processor and memory. Latency today is usually determined by cache misses (i.e. processors waiting for memory).</li> <li>Processor cache hierarchies</li> <li>Cache coherence protocols (MESI, MOESI)</li> <li>CISC instruction execution using internal RISC uops</li> <li>Fetch/decode/execute/retire cycle</li> <li>Speculative and out-of-order execution</li> <li>Effects of branches on execution</li> <li>Branch prediction</li> <li>Atomic instructions in processors</li> <li>Batching for amortization</li> <li>Individual instruction latencies</li> <li>Using processor specific tuning libraries (e.g. Intel VTune, AMD UProf)</li> </ul> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://youtu.be/5ZOuCuGrw48">Cliff Click’s Crash Course in Modern Hardware</a></li> <li><a href="https://www.youtube.com/playlist?list=PL8t1FdN2Tj3ZVAzTY-FvsS0qy-mEfRdoj">Intel’s presentation on Modern CPU Architectures</a>. Great overview of how processors execute instructions.</li> <li><a href="https://www.agner.org/optimize/instruction_tables.pdf">Instruction Latencies of processors</a></li> </ul> </div> <h2 id="multithreading">Multithreading</h2> <blockquote class="block-warning"> <p>Master it. Essential in the modern multi-core era.</p> </blockquote> <p>As a WSE, you have to be familiar concurrency and parallelism. Even though it is unlikely you’ll need to write your own primitives, a reasonable under-the-hood understanding is essential for both correct and performant code.</p> <p>In today’s era of shared memory multicore systems, concurrency and parallelism are front and center. Better performance leads to both happier users and better resource footprint (helps bottomline!)</p> <h3 id="concurrency">Concurrency</h3> <blockquote class="block-warning"> <p>Know the constructs, limitations and concerns</p> </blockquote> <p>Concurrency is about competing for resources as opposed to Parallelism which is about cooperation towards a particular task. Concurrency shows up in many contexts - queues, database transactions to name a couple.</p> <p>As a WSE, it is unlikely you’d write your own concurrent datastructures. However, you’ll very likely use them. It pays to understand concurrency concerns in choosing the right ones for your own application (apart from actually benchmarking performance of course). For example, as an exercise, deep-dive and understand a single producer single consumer high performance queue. It will introduce you to some important hardware details (also see resources in <a href="Hardware">Hardware</a> section).</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://lmax-exchange.github.io/disruptor/">LMAX disruptor queue</a></li> <li><a href="https://www.youtube.com/watch?v=929OrIvbW18">Martin Thompson: Adventures on concurrent programming in Java</a></li> <li><a href="https://www.youtube.com/watch?v=MC1EKLQ2Wmg">Martin Thompson: Mythbusting Modern Hardware to Gain Mechanical Sympathy</a></li> <li><a href="https://mechanical-sympathy.blogspot.com/">Martin Thompson: Mechanical Sympathy blog</a></li> </ul> </div> <h3 id="parallelism">Parallelism</h3> <p class="block-warning">Think parallel when appropriate; the benefits can be large.</p> <p>Parallelism is about exploiting cooperation among resources towards a particular task. Like with concurrency, getting top performance requires an understanding of hardware. For example, exploiting the single writer principle (each cache-line should be written only from one core) and exploiting the fact that a modern processor has many ALUs so it can do multiple add/multiplies simultaneously; i.e. each core itself has inbuilt parallelism and high performance code needs to exploit it.</p> <p>As a WSE, it is unlikely you will ever write a parallelism framework (like Java’s ForkJoin, or Go’s GoRoutines). Still, it is useful to understand the overheads and hardware-empathetic patterns in using parallelism.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://youtu.be/dPK6t7echuA">Guy Steele’s How to think of Parallel Programming Not</a></li> <li><a href="https://youtu.be/oV9rvDllKEg">Rob pike: Concurrency is not Parallelism</a></li> <li><a href="https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf">Tony Hoare’s Communicating Sequential Processes paper</a>. Basis for Go routines.</li> <li><a href="https://youtu.be/YQ6EpIk7KgY">Ron Pressler on Java Virtual Threads</a></li> <li><a href="https://youtu.be/n8uGsc4y6W4">Java Virtual Threads used like GoRoutines in the Game of Life</a></li> </ul> </div> <h3 id="memory-models">Memory Models</h3> <blockquote class="block-warning"> <p>Develop a mental model. Necessary for writing correct multi-threaded code.</p> </blockquote> <p>Writing <em>correct</em> concurrent code is hard. A non-trivial reason for its hardness comes from the non-intuitive behaviors of shared memory accessed from mutliple hardware threads (typically one or two hardware threads per core). A memory model specifies acceptable behaviors. Even after understanding a memory model, proving a piece of concurrent code as correct is non-trivial. Even though memory models originated as a hardware concern, they’ve worked their way up to high level programming languages like Java and C++ in multithreaded contexts. They determine semantics when multiple language threads communicate via shared memory.</p> <p>As a example, consider this. If core1 performs a series of writes (<code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code> are variables here): <code class="language-plaintext highlighter-rouge">A = 0; B = 0; A = 10; B = 20;</code> and core #2 performs <code class="language-plaintext highlighter-rouge">read B; read A;</code>, can it read <code class="language-plaintext highlighter-rouge">B==20 and A==0</code> ? This is the kind of question that is answered by memory models. One might think that it is a non-sensical possibility to obtain <code class="language-plaintext highlighter-rouge">B==20 and A==0</code>, but it is definitely possible under weak memory models. The x86/x64 architectures have what is called a Total-store-ordering (TSO) model where this will not happen but other oddities do. Higher level languages (like Java) have to provide a common way to write meaningful (i.e. predictable semantics) multi-threaded code across architectures.</p> <p>Knowing that your code runs on an x86/64 machine, you can exploit its TSO model to gain more performance. For example, you wouldn’t need to add a memory fence after a volatile write (we don’t need the details here).</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://pages.cs.wisc.edu/~markhill/papers/primer2020_2nd_edition.pdf">Primer on Memory Consistency and Cache coherence</a>. Terrific book to form a good mental model</li> <li><a href="https://youtu.be/QkbWgCSAEoo">Memory models overview &amp; RISC V</a></li> <li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.htmljls-17.4">Java Memory Model</a></li> <li><a href="TODO">TODO: Mental models for Memory Models &amp; Consistency</a></li> </ul> </div> <h2 id="latency">Latency</h2> <blockquote class="block-warning"> <p>Worth digging into at least once, preferably earlier in your career.</p> </blockquote> <p>Latency engineering is a different ball game compared to throughput engineering. It is unlikely for WSEs to look at cycle count. In some specific industries like High-Frequency-Trading, latencies matter tremendously. There, you’ll have to go deep and optimize for even seemingly minor gains. For example, you’ll pay attention to page faults, TLB cache misses, tune page sizes (huge pages?) etc.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://en.algorithmica.org/hpc/">Algorithms for Modern Hardware</a> shows practical issues</li> <li><a href="https://youtu.be/ncHmEUmJZf4">Matt Kulukundis’ talk on improving Hash Table performance at Google</a></li> <li><a href="https://www.brendangregg.com/perf.html">Linux Perf</a></li> <li><a href="https://github.com/async-profiler/async-profiler">Java Async Profiler</a>. The <a href="https://www.youtube.com/playlist?list=PLNCLTEx3B8h4Yo_WvKWdLvI9mj1XpTKBr">videos</a> are even better</li> </ul> </div> <h2 id="misc-topics">Misc topics</h2> <blockquote class="block-warning"> <p>There is no end of topics on a need-to-learn basis.</p> </blockquote> <p>There are several other topics in the general area of performance that we didn’t cover earlier. The more one’s coverage extends, the easier it is to grok newer topics. For example, there are remarkable similarities between optimistic transactions in a database and lock-free compare-and-swap based shared memory concurrent datastructures. While a deeper understanding is not necessary for a WSE, it is potentially helpful to know ancilliary topics.</p> <div class="boxyList"> <p>Resources</p> <ul> <li><a href="https://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf">Lock free queue</a></li> <li><a href="https://spdk.io/">SPDK</a> is for high-performance storage using user-space polled NVME driver</li> <li><a href="https://nvmexpress.org/">NVME</a> a protocol optimized for SSD</li> <li><a href="https://www.dpdk.org/">DPDK</a> for high performance network packet processing</li> <li><a href="https://en.wikipedia.org/wiki/Zero-copy">Zero copy Networking</a></li> </ul> </div> <h1 id="apis">APIs</h1> <p>APIs really are a vast topic and I will only be scatching the surface here. APIs come in many forms: internal library APIs consumed by your application code and external APIs consumed by a browser or external clients. While some considerations are different between internal and external APIs, a vast majority of principles apply to them both.</p> <p>As a WSE, API design and maintenance will be a big portion of your job. It is a vast topic with many aspects to it. Some of them, in no particular order:</p> <ul> <li>Design: Good API design is HARD. For example, API methods should compose well, should support older clients performing read-modify-write operations and be consistently guessable for end-users. <ul> <li>An example of composition is the ability to express <code class="language-plaintext highlighter-rouge">create this object A; then create its child object B; then create its child C. If any fail, don't change anything</code>. A bunch of APIs will simply expose individual API methods, one for each of the three operations above, but will not expose an operation to do them atomically. Thus, clients end up with the burden of rollbacks of <code class="language-plaintext highlighter-rouge">A</code> if they encounter failures in creating the child or the grandchild.</li> </ul> </li> <li>Compatibility: API changes are inevitable. Servers and Client binaries differ in their versions but should still work with ambiguity. This can be quite tricky - if an older client doesn’t specify a newly introduced field, should the server treat it as 1. client doesn’t know about this field or 2. Client knows about this field and wants to clear it? Some other changes like database schema changes (say a single string column is being moved into a pair of ints) need compatibility with application code and it can be both tedious and also surprisingly difficult to do well manually (needs tooling). It can be between external clients and an API you expose (hard to change because of backwards compatibility guarantees) or between your database and application and so on</li> <li>Implementation: In general, you’ll have to support multiple API versions from your implementation codebase. This requires a fair amount of thought and discipline. External clients tend to stick to their current API versions - they need to invest resources to migrate between API versions and very often only a small percentage of such clients will even have any benefit from upgrading API versions (they won’t take advantage of the new features); so, there’s resistance towards them. So, all these outstanding versions can add tech debt to your codebase.</li> </ul> <p>APIs are one of those things which require learning in the field.</p> <h2 id="composable-design">Composable design</h2> <h2 id="versioning--compatibility">Versioning &amp; Compatibility</h2> <h2 id="supporting-multiple-versions-from-one-codebase">Supporting Multiple versions from one codebase</h2> <h2 id="predictability">Predictability</h2> <h2 id="programming-languages">Programming Languages</h2> <h1 id="communication">Communication</h1> <h2 id="layered-protocols-understand-the-important-ideas">Layered protocols: Understand the important ideas</h2> <p>More than the details, it is important to understand the ideas behind the layered architecture of TCP/IP and similar protocols. Ultimately, TCP is another distributed computation problem - both sender and receiver agree on the order and number of bytes.</p> <p>The details do matter to some degree; for example, you should be familiar with headers vs payload</p> <h2 id="tcpip">TCP/IP</h2> <blockquote class="block-warning"> <p>Understand the basic contract and contrast with UDP.</p> </blockquote> <h2 id="http-the-workhorse">HTTP: The workhorse</h2> <p>App level protocol. HTTP 1 vs 2 vs 3.</p> <h2 id="grpc-rpc-framework">gRPC: RPC framework</h2> <p>gRPC is a prime example.</p> <div class="boxyList"> <p>Resources: gRPC notions video gRPC-web for browser/app clients Others like Thrift</p> </div> <h2 id="networking">Networking</h2> <p>Need to understand basics of Networks, starting from Ethernet to subnets, WWW, DNS, routing. Useful for understanding docker networks, or setting up VPNs etc.</p> <p>Also need to understand notions of connections, streams v</p> <div class="boxyList"> <p>Resources: Internet Routing. Docker networking</p> </div> <h1 id="production">Production</h1> <h2 id="containers">Containers</h2> <p>Docker is the de-facto standard. Need to understand c-groups</p> <div class="boxyList"> <p>Resources: docker presentation on namespaces</p> </div> <h2 id="load-balancing">Load balancing</h2> <p>L4 load balancing vs L7 load balancing.</p> <p>Resources: Matt Klein article</p> <h2 id="failure-patterns">Failure patterns</h2> <p>Understand how failures are</p> <p>Resources: google sre book</p> <h2 id="monitoring">Monitoring</h2> <p>Real-time debugging.</p> <p>Resources: See prometheus/grafana</p> <h2 id="telemetry">Telemetry</h2> <p>First class citizen for debugging and improving the user experience.</p> <h2 id="kubernetes">Kubernetes</h2> <p>adfas</p> <p>Resources: Specify the spec and K8s makes it possible.</p> <h2 id="service-mesh">Service mesh</h2> <p>Envoy</p> <h2 id="deployment-servers">Deployment Servers</h2> <p>TLS termination; servers</p> <h1 id="security">Security</h1> <h2 id="basics">Basics</h2> <p>Notions of integrity, privacy, perfect forward secrecy.</p> <h2 id="authentication">Authentication</h2> <p>Cookies,</p> <h2 id="authorization">Authorization</h2> <p>Resources, Principals, Roles = bunch of Actions</p> <h2 id="credential-exchange">Credential exchange</h2> <h2 id="common-attacks">Common attacks</h2> <h3 id="xsrf-attacks">XSRF attacks</h3> <h3 id="xss-attacks">XSS attacks</h3> <h3 id="sql-injection-attacks">SQL Injection attacks</h3> <p>Resource: SQL Injection computerphile</p> <h3 id="buffer-overrun-exploit">Buffer overrun exploit</h3> <p>Resource: Buffer overrun computerphile</p> <h2 id="browser-security-models">Browser security models</h2> <h1 id="client-side">Client side</h1> <h2 id="browser-ux">Browser UX</h2> <h2 id="iosandroid-app-ux">IOS/Android App UX</h2> <h2 id="frameworks-1">Frameworks</h2> <p>React, Angular, Flutter etc.</p> <h2 id="stylinganimations">Styling/Animations</h2> <p>CSS etc</p> <h1 id="developer-tools">Developer Tools</h1> <p>IDE, Chrome tools, Linux perf, Java GC tools, VI/Emacs, TMUX/Screen, SSH, Linux administration tools, bash scripting, python scripting</p> <h1 id="your-roles">Your Roles</h1> <p>As a WSE, you’ll have to play many roles. You’ll interact with many stakeholders, provide leadership and expand your influence. The following is meant to provide a sneak peek into these aspects.</p> <h2 id="personnel-interactions">Personnel Interactions</h2> <p>As a WSE, it is <strong>critically important</strong> to be able to interact with a wide variety of roles. It is important to maintain a strong working relationship across the entire spectrum of roles. The following is a non-exhaustive list of such roles you’ll interact with.</p> <h3 id="junior-swes">Junior SWEs</h3> <p>You’ll need to mentor and guide junior SWEs. Sharing knowledge and practical tips in an intellectually honest manner will improve your own technical depth.</p> <h3 id="peer-swes">Peer SWEs</h3> <p>It is likely you’ll have many peer SWEs; peer defined typically by level. Do not feel threatened or competitive towards peer SWEs. You’ll no doubt encounter some competitive ones but in a growing companies, the pie is growing and collaboration - not competition - is what gets you further. So, focus on collaboration and moving the product/company forward.</p> <h3 id="senior-swes">Senior SWEs</h3> <p>With Senior SWEs, your interactions should be different compared to peers/juniors. Working with good senior SWEs early on in your career can be a massive accelerant to your technical as well as career progress. Senior SWEs with a vision tend to have projects in mind and will be on the lookout for hungry SWEs like yourself. It is useful to interact with them with the aim to pick up some of those project ideas and run with them.</p> <p>Interacting with senior SWEs can be intimidating not least because you can feel like you are being judged - after all, senior SWEs have a large say in evaluating your performance. However, the sooner you get over that fear and the sooner your trust yourself to learn quickly, the better off you’ll be. There’ll be stumbling blocks and there’ll be occasions where you’ll look foolish, but most senior SWEs can recognize them for what they are (mere stepping stones) - after all, they themselves probably had many such experiences.</p> <p>Bottom line: be honest about your limitations and ask senior SWEs about upcoming projects. When you take a project, make sure you get it done. Ask for help if you are stuck. Expect to look foolish time to time. Just focus on getting things done rather than worry about whether you are being judged - ultimately getting things done is both more important and what gets your work judged favorably.</p> <h3 id="engineering-managers">Engineering Managers</h3> <p>With EMs, the canvas is yours. Typical conversations will include what’s coming down the pike for the product, what’s front and center of your mind and career conversations among others. It is possible that you have a bad faith EM, but those are rare in my experience. The bad ones will simply don’t care enough rather than actively sabotage. The good ones will care about your growth and helping you reach your potential. With the good ones, it is helpful to be reasonably open about what you want and how you can help solve some of the more important challenges facing the product.</p> <h3 id="product-managers">Product Managers</h3> <p>With PMs, the focus of your conversations will be on product and customer requirements. You’ll have to speak a different language - the realm of customer needs/wants. It will be a significantly different skillset from technical expertise.</p> <h3 id="customers">Customers</h3> <p>Sometimes WSEs will interface with customers directly to learn their pain points. If you do get the chance, lean in and really understand how customers use the product. If you don’t get given the chance, ask for it. Listening to customers first hand will connect the dots between your technical work and customer value. More importantly, it helps you get a sense of relative priorities of customers. For example, should you spend time towards reducing the latency of your service or towards providing a more understandable error message when something goes wrong? Understanding the customer perspective helps you better make micro decisions like this one.</p> <h3 id="difficult-colleagues">Difficult colleagues</h3> <p>It is likely you’ll have some colleagues who can be characterized as ‘difficult’. Have a strategy to collaborate effectively with them despite the difficulties.</p> <h2 id="job-responsibilities">Job Responsibilities</h2> <h3 id="design-doc-reviews">Design Doc reviews</h3> <p>TODO</p> <h3 id="code-reviews">Code reviews</h3> <p>TODO</p> <h3 id="oncall-production-support">Oncall Production support</h3> <p>TODO</p> <h3 id="code-that-you-own">Code that you own</h3> <p>TODO</p> <h2 id="leadership">Leadership</h2> <p>Leadership is one of those things that you can recognize when you see but not necessarily define it. It has many strings and so a simple working definition is likely to be simplistic. In this section, I’ll draw attention to some of its important aspects that a WSE can reasonably exhibit.</p> <h3 id="integrity--values">Integrity &amp; Values</h3> <p>Choose Integrity. Really. Always.</p> <p>This should be obvious. We teach our children to not lie, not steal, not be rude and so on. The same applies to us as adults in the workplace.</p> <h3 id="articulating-thoughts">Articulating Thoughts</h3> <p>One of the more under-appreciated skills is the ability to articulate thoughts to the point. This will be very important both when communicating to a large audience and to a busy audience. In the former, you can’t clarify the questions from everyone and in the latter, they don’t have time to ask all the important questions. So, the onus will be on you to be crisp and clear.</p> <p>In my practice, I’ve found it useful to consider writing down and editing my thoughts until they are crisp. I find it useful to think of the document as a database with the readers’ questions as queries against it. The sooner readers can find answers to their questions, the more they’ll be incentivized to read/understand/comment on the document and for it eventually develop wings.</p> <h3 id="making-technical-choices">Making technical choices</h3> <p>As you grow more senior, you’ll have the responsibility for making technical choices. This can involve something small like “which particular backend system do we use?” to something larger like “what engineering practices should we adopt for lower total-cost-of-ownership?” to even larger, multi-faceted questions like “which of these technical choices will help us solve more important customer problems over the longer run?”.</p> <p>Technical choices have an outsized impact over a few-year span. While everyone can have an opinion on which option to choose, truly nuanced decision making is very hard and the very least requires significant intelligent guessing over the pros/cons of the choices. Judgment calls are often rooted in subconscious experience and the ability to articulate those thoughts is one of the requirements for expanding your influence broadly.</p> <h3 id="being-an-example">Being an example</h3> <p>Aim to be that person whom others will ask “In this situation, what would X do?”. This is a very high bar, but it is something that will naturally happen if you set yourself some principles that you articulate to your colleagues and follow them.</p> <h3 id="growing-others-around-you">Growing others around you</h3> <p>A big part of leadership is to think of the product for the long-term. Good SWEs are hard to find and cultivating a deep talent pool is an important long-term competitive advantage. Providing technical advice in the form of code reviews or design feedback or even informal chats can and does add up over time.</p>]]></content><author><name></name></author><category term="software-engineering"/><category term="software-abiyz"/><summary type="html"><![CDATA[Many skillsets required. Some only learnable from practice.]]></summary></entry><entry><title type="html">Are there changes that accelerate software aging? Yes, here’s a small list.</title><link href="https://vemana.github.io/blog/2023/software-changes-and-aging/" rel="alternate" type="text/html" title="Are there changes that accelerate software aging? Yes, here’s a small list."/><published>2023-11-13T15:00:00+00:00</published><updated>2023-11-13T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/software-changes-and-aging</id><content type="html" xml:base="https://vemana.github.io/blog/2023/software-changes-and-aging/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>If you’ve ever observed the software powering a fast growing product, you know that software ages and becomes fragile as requirements change. Can we overcome this aging or at least better manage it?</p> <h1 id="some-patterns-of-change-that-accelerate-aging">Some patterns of change that accelerate aging</h1> <p>In this section, I’ll note some patterns of change that contribute to software aging when not managed properly. These patterns occur during the normal lifecycle of software evolution, typically from changing/newer requirements. My hope is that aging can be managed effectively by virtue of these patterns being recognized &amp; formalized.</p> <h2 id="1-going-from-product-type-to-sum-type">1. Going from Product Type to Sum Type</h2> <blockquote class="block-tip"> <p>When SWEs start off a model (quite reasonably) as a Product Type, changing it to a Sum Type can be a significant effort that is often hacked around.</p> </blockquote> <h3 id="ptos-example1">Example 1</h3> <p>When getting a project off the ground, a SWE might reasonably model a Printer’s output paper like so:<br/> <code class="language-plaintext highlighter-rouge">PrinterPaper := (Height, Width)</code></p> <p>Later, requirements change (printer can now print on circular paper) <br/> <code class="language-plaintext highlighter-rouge">PrinterPaper := CircularPaper | RectangularPaper</code> <br/> <code class="language-plaintext highlighter-rouge">CircularPaper := (Radius)</code> <br/> <code class="language-plaintext highlighter-rouge">RectangularPaper := (Height, Width)</code></p> <p>The former version of <code class="language-plaintext highlighter-rouge">PrinterPaper</code> is a Product Type and the latter version is a Sum Type.</p> <h3 id="ptos-example2">Example 2</h3> <p>Suppose you are the software owner and your product is managing 401K plans (like Vanguard). It offers say 3 different <code class="language-plaintext highlighter-rouge">Fund</code>s that an Account holder can put money into. Each <code class="language-plaintext highlighter-rouge">Fund</code> has a price and each Account owns some quantity of each of the 3 funds. That is, <code class="language-plaintext highlighter-rouge">Account := List of (Fund, Quantity)</code> and <code class="language-plaintext highlighter-rouge">Fund := (Price, &lt;other metadata&gt;)</code>.</p> <p>Now, you need to support a SDB (Self Directed Brokerage) for a 4th <code class="language-plaintext highlighter-rouge">Fund</code>; that is, an option for an Account holder to put money into self-managed external brokerage account. It’s no longer true that each <code class="language-plaintext highlighter-rouge">Fund</code> has a notion of <code class="language-plaintext highlighter-rouge">Today's price</code> because SDB doesn’t have a price! You now have a different model: <code class="language-plaintext highlighter-rouge">Fund := FundWithPrice | SDB</code>. That is, <code class="language-plaintext highlighter-rouge">Fund</code> has evolved into a Sum Type from a Product Type.</p> <h3 id="ptos-difficulty">Why this Change is difficult to manage</h3> <p>Going from Product Type to Sum Type often requires a ton of effort. Using example#2, here are some things that need to change in response:</p> <ul> <li>Database: Suppose you are using a relational db and have a table for the supported <code class="language-plaintext highlighter-rouge">Fund</code>s. Data specific to the SDB cannot fit in this table because the properties of a <code class="language-plaintext highlighter-rouge">FundWithPrice</code> are different from <code class="language-plaintext highlighter-rouge">SDB</code>; you need to invest time in a solution.</li> <li>Application: Your API method <code class="language-plaintext highlighter-rouge">retrieveAccountHoldings</code> that returns a <code class="language-plaintext highlighter-rouge">list of (fund_id, quantity, today's price)</code> now has to change to support returning SDB data and the impl has to change to support it. If you have an external API, exposing and versioning this change can be challenging (without good tooling)</li> <li>UI: Your UI was previously displaying Account Holdings in a table with three columns: (Fund, Quantity, Price). You now have to rethink that design in the presence of an SDB.</li> </ul> <h3 id="ptos-practice">In Practice</h3> <p>When confronted with this problem, time/resource constraints often prefer a <strong>hacky solution</strong>: Model an SDB as a <code class="language-plaintext highlighter-rouge">Fund</code> with price = 1 and quantity = amount of money allocated to the SDB! This choice amplifies aging:</p> <ul> <li>If new columns are added to the <code class="language-plaintext highlighter-rouge">Funds</code> database table for SDB specific data (yes, this is a hack), over time, it leads to a messy schema and a new SWE cannot look at the db and understand the data model</li> <li>Somewhere in the application layer, you probably have a class called <code class="language-plaintext highlighter-rouge">Fund</code> with a property called <code class="language-plaintext highlighter-rouge">CurrentPrice</code>. If SDBs are also modeled as instances of <code class="language-plaintext highlighter-rouge">Fund</code>, code gets very messy very quickly because you don’t know whether <code class="language-plaintext highlighter-rouge">CurrentPrice</code> property can be invoked on a given <code class="language-plaintext highlighter-rouge">Fund</code> object.</li> <li>The UI has similar issues; it needs several if/else statements in the code to show the UI differently for SDBs as compared to other regular <code class="language-plaintext highlighter-rouge">Fund</code>s. Many if/else statements are a standard recipe for bugs.</li> </ul> <p>There are no great solutions for this problem today. But, one can imagine end-to-end software development environments (i.e. Programming languages, databases &amp; all parts of the stack) having tooling to make moving from Product Types to Sum Types easy. One thing’s for sure: with even a small number of such hacks, the codebase is a hot mess.</p> <h2 id="2-exceeding-a-dimensions-implicit-cardinality">2. Exceeding a dimension’s implicit cardinality</h2> <blockquote class="block-tip"> <p>When SWEs model data that 1. Contains sets/lists 2. Is customer-specified, there’s often an implicit expectation of the cardinality on those sets/lists. Software ages when these implicit expectations change because customers outgrow the requirements.</p> </blockquote> <h3 id="cardinality-example1">Example</h3> <p>Suppose you are designing a schema where <code class="language-plaintext highlighter-rouge">entity X has a List of entities of type Y</code>. Suppose, you design it assuming that <code class="language-plaintext highlighter-rouge">X has around 1000 of Y</code>. This assumption around 1000 is known widely because <code class="language-plaintext highlighter-rouge">why does anyone ever want more than 1000 Y per X?</code>. At some point, the product grows and some customer needs X to have 10,000 of Y and so they start creating data using this extra cardinality.</p> <h3 id="cardinality-difficulty">Why this Change is difficult to manage</h3> <p>There are many problems with cardinality abuse because SWEs will have expressed this implicit knowledge in their choice of the architecture and algorithms.</p> <ul> <li>Suppose you sharded out compute per <code class="language-plaintext highlighter-rouge">X</code>; i.e. each <code class="language-plaintext highlighter-rouge">X</code> is served by one shard. Once there’s cardinality abuse of <code class="language-plaintext highlighter-rouge">Y per X</code>, the shard processing <code class="language-plaintext highlighter-rouge">big X</code> (i.e X with 10K Y) slows down and that cascades to other <code class="language-plaintext highlighter-rouge">X</code> being served by the shard. You profile those other slow <code class="language-plaintext highlighter-rouge">X</code>s and find nothing wrong. And you didn’t have a way to know that the <code class="language-plaintext highlighter-rouge">big X</code> is monopolizing compute and penalizing all the <code class="language-plaintext highlighter-rouge">small X</code> assigned to its shard!</li> <li>With 1000 entries, an O(N^2) algorithm works fine latency wise, but at 10,000 entries it may produce noticeable delays. SWEs would have chosen O(N^2) algorithm because of the conscious assumption that <code class="language-plaintext highlighter-rouge">N &lt;= 1000</code>. Suddenly, there’s a serious problem: what was once a snappy app is no longer snappy. Worse yet, you don’t even know that this is the reason until you profile and even if you do and identify it, fixing it may be an expensive project of its own.</li> </ul> <p>In other words, when assumptions underlying the architecture are invalidated, production tends to break in mysterious ways. The violations are often slow and steady causing a gradual, insidiuous deterioration over a period of time. By the time a final violation tips it visibly over the edge, there’s not one single thing to blame and often it is just easier to pile on and get more value out of the existing (outdated) architecture rather than redoing it.</p> <h3 id="cardinality-practice">In Practice</h3> <p>The root cause is that some assumptions (like cardinality) are only ever present in human brains (whoever designed them). The architecture initially reflects these (very good) assumptions but after a few requirement changes that invalidate the assumptions, the architecture is no longer suited to the assumptions. Since they were never recorded explicitly in the codebase in the first place, there’s no way to even really know the failure points until a customer abuses a dimension.</p> <p>It is difficult to imagine self-righting architectures in response to observed cardinalities (outside of some special problem domains like auto-sharding databases) until perhaps AI starts writing all the code and change architectures (and data migrations) on the fly. Until then, in practice, explicitly enforcing the implicit assumptions is a reasonable approach. For example, when writing data to the databases, validate that <code class="language-plaintext highlighter-rouge">N &lt;= 1000</code>. This way, if a customer wants to bump up N to 10,000, it’ll fail and you can talk to the customer to learn their use case.</p> <h2 id="3-evolutionary-conflations">3. Evolutionary Conflations</h2> <p class="block-tip">As we all know, distinct concepts require distinct names and distinct treatment; sometimes, the conflation can creep in very subtly through evolution.</p> <h3 id="conflating-example1">Example</h3> <p>You have a store where users either 1. order new gifts or 2. reorder previously ordered gifts. You just launched the store &amp; for each order you randomly picked the packaging color (the user didn’t get a choice). Suppose Order #10 had Red color packaging. Time progresses and you introduce a settings page where the user can configure a default packaging color.</p> <p><strong>Here’s the question</strong>: Suppose the user configures Green for default packaging color and proceeds to reorder Order #10. What color packaging will you use - Green or Red? Both answers are feasible</p> <ul> <li>Red is correct because the user is just reordering a prior Order &amp; expects the same color packaging</li> <li>Green is correct because the user configured Green as the default color &amp; did not explicitly specify it in Order #10 (which is being reordered); so, they expect to get the default</li> </ul> <h3 id="conflation-difficulty">Why this change is difficult to manage</h3> <p>The question of Red vs Green for re-orders arises at the time you introduce the default packaging color option. Your database entry of Order #10 probably looks like <code class="language-plaintext highlighter-rouge">Order {id: 10, packaging_color: Red}</code>. The attribute name <code class="language-plaintext highlighter-rouge">packaging_color</code> is now conflated: does it represent the shipped packaging color or user specified packaging color? It needs to be de-conflated. All because you introduced a new adjacent notion of <em>user specified</em> packaging color.</p> <p>To deconflate, you’ll need to update Order entries in the database to reflect the reality of Order#10: <code class="language-plaintext highlighter-rouge">Order {id: 10, shipped_packaging_color: Red, user_specified_packaging_color: UNSPECIFIED}</code>. Depending upon what the Product team decide, you can now support choosing either RED or GREEN for reordering Order#10.</p> <p>To summarize, instead of a single concept called <code class="language-plaintext highlighter-rouge">packaging_color</code>, you now have two similar concepts &amp; the old concept has to be mapped into one of these new concepts. Further, this distinction has to be reflected in every piece of the stack, not just the database, but also the application layer &amp; the UI and also manage compatibility between different layers while doing these changes. This can be a substantial amount of work. For example, apart from renaming &amp; backfilling, you need to look at all uses of <code class="language-plaintext highlighter-rouge">packaging_color</code> and check that they are all used as if it were <code class="language-plaintext highlighter-rouge">shipped_package_color</code>. This is a pretty difficult undertaking for any large project with tentacles.</p> <h3 id="conflation-inpractice">In Practice</h3> <p>In practice, often a hacky solution is adopted: <code class="language-plaintext highlighter-rouge">For reorders, just use the packaging_color attribute of the order being reordered</code> and <code class="language-plaintext highlighter-rouge">For fresh orders, use the packaging_color attribute for recording the user specified color</code>. It is easy because it requires no further database changes. Unless the product team has a strong opinion on the topic, RED will likely be the chosen answer, just because it is easy.</p> <p>The deconflation may seem unnecessary especially for those already familiar with the product/db schema, but, leaving it out leads to aging:</p> <ul> <li>It ramps up the learning curve for any SWEs onboarding onto the codebase <ul> <li>For example, a new SWE looking at the database does not know what the <code class="language-plaintext highlighter-rouge">packaging_color</code> is supposed to be: user specified or shipped</li> </ul> </li> <li>It is restrictive. Deconflation provides more flexibility. Without deconflation, <ul> <li>You couldn’t support Green as the answer</li> <li>You couldn’t model the case where you run out of a particular color and need to use a different one. This fact cannot be adequately captured without separating the shipped and user specified packaging colors</li> </ul> </li> </ul> <p>In practice, such conflation occurs often and is subtle. It pays off to be vigilant and invest in tooling to mitigate it.</p> <h1 id="some-themes">Some themes</h1> <p>Some themes can be extracted from the patterns above.</p> <ul> <li>Implicit assumptions that are present only in human brains <ul> <li>For example, cardinality assumptions underlying the architecture</li> </ul> </li> <li>Lack of tooling for common changes for which hacky solutions don’t age well <ul> <li>For example, moving from Product type to a Sum type across the stack should be zero-effort</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="software-engineering"/><category term="software-ageability"/><summary type="html"><![CDATA[Without effective mitigation, some patterns of change accelerate software aging.]]></summary></entry><entry><title type="html">Can software testing be objective? Hello from Homomorphisms.</title><link href="https://vemana.github.io/blog/2023/testing-calculator-homomorphism/" rel="alternate" type="text/html" title="Can software testing be objective? Hello from Homomorphisms."/><published>2023-10-20T15:00:00+00:00</published><updated>2023-10-20T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/testing-calculator-homomorphism</id><content type="html" xml:base="https://vemana.github.io/blog/2023/testing-calculator-homomorphism/"><![CDATA[<h1 id="5-minute-summary">5 minute summary</h1> <p>If you ever wrote a test for a piece of code, you’ve wondered how many and what kind of tests to write. Surprisingly, for a class of functions called homomorphisms, you can write minimal tests with confidence. They are also very common if you know to look for them, but that’s a topic for another time.</p> <p>For a calculator <code class="language-plaintext highlighter-rouge">evaluate</code> function:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">input</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div> <p>operating on AST</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sealed</span> <span class="kd">interface</span> <span class="nc">Expression</span> <span class="o">{</span>
  <span class="n">record</span> <span class="nf">Addition</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Division</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Number</span><span class="o">(</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Variable</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div> <p>with example expression</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a*10 + b // a &amp; b are variables whose values can be looked up in VariableMap
</code></pre></div></div> <p>Don’t write it like this (let’s give it a name: <strong>Natural Impl</strong>):</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">input</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">;</span>
    <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">variables</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">+</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">*</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">/</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
  <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div> <p>Write it like this instead (let’s give it a name: <strong>Homomorphic impl</strong> for reasons explained later):</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Since the thrust of this post is testing, we'll not comment on </span>
<span class="c1">// 1. Efficiency. For example, boxing, varargs overheads here. </span>
<span class="c1">//    There are many ways to mitigate them.</span>
<span class="c1">// 2. Error handling. What if dividing by 0? </span>
<span class="c1">//    Again, there are many options.</span>

<span class="kd">interface</span> <span class="nc">Operator</span> <span class="o">{</span>
  <span class="kt">long</span> <span class="nf">invoke</span><span class="o">(</span><span class="kt">long</span><span class="o">...</span> <span class="n">children</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Evaluator</span> <span class="o">{</span>
  
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">PLUS</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">MULTIPLY</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">DIVIDE</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

  <span class="c1">// This is our evaluate function implementation</span>
  <span class="kd">static</span> <span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">operator</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">varMap</span><span class="o">)</span>
        <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">children</span><span class="o">(</span><span class="n">node</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">child</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">varMap</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">toArray</span><span class="o">());</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="nf">operator</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">v</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">varMap</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">PLUS</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">MULTIPLY</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">DIVIDE</span><span class="o">;</span>
    <span class="o">};</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Expression</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">();</span> <span class="c1">// empty</span>
      <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">();</span> <span class="c1">// empty</span>
      <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
    <span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>and write the following basic tests:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// One basics test per Node (like Addition, Multiplication)
expect(7, "a", {a = 7}); // Variable
expect(9, "9", {});      // Number
expect(11, "1+10", {});  // Addition
expect(12, "3*4", {});   // Multiplication
expect(2, "4/2", {});    // Division

// One test per Corner case per Node
expect_failure("1/0", {});
</code></pre></div></div> <p>but skip more complex tests like this (we can prove they are not required):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Complex tests (arg depth &gt; 1): can be skipped with Homomorphic Impl
expect(203, "10*20+a", {a=3});
expect(18, "a*b+(3*2)", {a=3, b=4});
</code></pre></div></div> <p>thereby obtaining full coverage in a small number of tests.</p> <h2 id="what-is-a-homomorphic-impl">What is a Homomorphic Impl?</h2> <p>Homomorphic Impl exploits the fact that the <code class="language-plaintext highlighter-rouge">evaluate</code> function is a <strong>Homomorphism</strong> <a href="https://en.wikipedia.org/wiki/Homomorphism">(wiki)</a> to separate tree traversal from operator application. Despite the math terminology, Homomorphism <a href="#homomorphisms">(in layman terms)</a> is a simple idea.</p> <p>In a Homomorphic Impl, each node defines its <strong>Operator</strong> function (PLUS, MULTIPLY etc.) and there’s a separate evaluator that traverses the Expression tree and invokes the Operators. Contrast this with the <strong>Natural Impl</strong> where the traversal is intertwined with the Operator application in the body of the method impl. This sort of coupling doesn’t age well - see <a href="#why-prefer-a-homomorphic-impl">Why prefer a Homomorphic Impl</a>.</p> <h2 id="why-prefer-a-homomorphic-impl">Why prefer a Homomorphic Impl?</h2> <p>There are many benefits to exploiting homomorphism.</p> <p><strong>Test minimalism</strong></p> <ul> <li>With a Homomorphic Impl, <strong>you can confidently skip complex tests</strong> - like those that use arg depths &gt; 1. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Complex tests (arg depth &gt; 1): can be skipped with Homomorphic Impl
expect(203, "10*20+a", {a=3});
expect(18, "a*b+(3*2)", {a=3, b=4});
</code></pre></div> </div> </li> <li>We can prove rigorously that they are not needed; but it is fine to write one single complex expression test, just to be safe</li> </ul> <p><strong>Ageable code</strong>. Homomorphic Impl ages well along many important dimensions of change.</p> <ul> <li>Introduce parallelism easily if required. Doing this with Natural Impl gets very messy very quick <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Showing only the changed parts.</span>

<span class="kd">static</span> <span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span><span class="o">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StructuredTaskScope</span><span class="o">.</span><span class="na">ShutdownOnFailure</span><span class="o">())</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">varMap</span><span class="o">,</span> <span class="n">scope</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">,</span> <span class="nc">StructuredTaskScope</span> <span class="n">scope</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">var</span> <span class="n">childResults</span> <span class="o">=</span> <span class="n">children</span><span class="o">(</span><span class="n">node</span><span class="o">)</span>
                         <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">child</span> <span class="o">-&gt;</span> <span class="n">scope</span><span class="o">.</span><span class="na">fork</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">varMap</span><span class="o">)))</span>
                         <span class="o">.</span><span class="na">toList</span><span class="o">();</span>
  <span class="n">scope</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
  <span class="k">return</span> <span class="nf">operator</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">varMap</span><span class="o">)</span>
      <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">childResults</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Future:</span><span class="o">:</span><span class="n">resultNow</span><span class="o">)</span>
                  <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">)</span>
                  <span class="o">.</span><span class="na">toArray</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li>Homomorphic Impl has O(1) calls to <code class="language-plaintext highlighter-rouge">evaluate</code> but Natural Impl has O(Nodes) calls to <code class="language-plaintext highlighter-rouge">evaluate</code> <ul> <li>In the example above, Homomorphic Impl has 1 call to <code class="language-plaintext highlighter-rouge">evaluate</code> while Natural Impl has 6 of them (2 each for addition, multiplication, division operators)</li> <li>Reducing usage of API surface is extremely useful in practice. <ul> <li>For example, consider changing the API signature to pass one more parameter. It requires 2 changes in Homomorphic Impl but 6 changes in Natural Impl. This adds up quickly when you have 20 Operators instead of 5</li> <li>Not applicable here, but instrumenting call-sites for telemetry is easier when you have fewer number of call-sites</li> </ul> </li> </ul> </li> <li>Add new operators with ease <ul> <li>For example, it is trivial to add the SUBTRACTION operator</li> <li>Code remains easy to read even with 20 operators, while the Natural Impl starts becoming unwieldy at say 10</li> </ul> </li> <li>Handoffs to different owners are relatively straightforward to explain</li> </ul> <h2 id="summary-of-the-summary">Summary of the summary!</h2> <p>There’s a class of functions called Homomorphisms that can be coded in a certain pattern - the Homomorphic Impl - which requires only a small number of tests to gain confidence. The pattern also ages well to many typical changes. Homomorphisms are VERY common if you know to look for them, but that’s an entirely different post.</p> <hr/> <h1 id="introduction">Introduction</h1> <p>All good quality Software has tests. But, there’s the age old question faced by every software engineer:</p> <ul> <li>How many tests should I write?</li> <li>What kind of tests should I write?</li> </ul> <p>These are good questions that elicit non-committal, <strong>it depends</strong> answers that ultimately don’t help either the author, the code reviewer or the next maintainer.</p> <h2 id="why-care-about-eliminating-test-subjectivity-and-minimizing-tests">Why care about eliminating test subjectivity and minimizing tests?</h2> <p>High quality automated tests are essential for high quality software. Tests determine iteration &amp; in turn product velocity. A lack of tests is a disaster in the making - any project of reasonable size grinds to a crawl without automated tests while their presence avoids <code class="language-plaintext highlighter-rouge">hostage to the code</code> situations. Rapid changes can be made &amp; rolled out with confidence.</p> <p>Test minimalism is important because a large number of tests (for e.g. to obtain code coverage) carries significant costs - presubmit times balloon, tests tend to get coupled with code &amp; changes to one piece of code breaks a large number of tests for no good reason.</p> <p>Test subjectivity - that is, what tests to write - hinders productivity. It causes code review debates, missing tests (because there’s no framework to think about them) which bite later, difficulty in understanding which new tests to write when changing code, challenges in handovers to a different owners among others.</p> <p>There are plenty of other concerns that are topics for other posts. For example, once you decide to write a test (logically), how to write it cleanly in a way that conveys the intent of the test to any new maintainer? Really the list is endless; one can barely scratch the surface of quality tests with a single post.</p> <blockquote class="block-warning"> <p>Perhaps the most important thing going for quality tests is this funnel: quality tests -&gt; higher productivity -&gt; less need to hire a ton -&gt; less need to reduce the hiring bar -&gt; maintain high revenue/employee -&gt; happier employees -&gt; growth for everyone.</p> </blockquote> <h2 id="in-this-post">In this post…</h2> <blockquote class="block-tip"> <p>In this post, I’ll demonstrate a class of problems &amp; a strategy of coding for which we CAN objectively write a minimal number of tests with confidence &amp; coverage.</p> </blockquote> <p>Testing is such a complex subject that it is likely not feasible to provide a general recommendation. At the same time, there are probably some problem domains which admit objective recommendations. In more than a decade of engineering experience, I am yet to encounter objective recommendations for what &amp; how many tests to write. It is not even clear if such recommendations exist. But, in this post I argue otherwise and make an object recommendation on a particular problem domain.</p> <p>One might ask: how feasible is it to have one objective recommendation per problem domain that admits? It is a whole lot better than the current mess of general recommendations which mean different things to different people. As a field, current best practices around tests seem ambigous and fresh thoughts with more objectivity are necessary.</p> <hr/> <h1 id="a-surprisingly-robust-strawman">A [surprisingly robust] strawman</h1> <p>How to approach a daunting, nebulous question like <code class="language-plaintext highlighter-rouge">What kind of tests should I write?</code>? Start by asking a simpler, almost strawman question, of course!</p> <blockquote class="block-warning"> <p><strong>A simpler, natural question to ask</strong>: What is the minimal number of tests one needs to write for a Calculator program?</p> </blockquote> <h2 id="making-the-question-concrete">Making the question concrete</h2> <p>Let’s make it concrete by defining an Expression AST. The Calculator program operates on this AST.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Calculator program Expression AST</span>

<span class="n">sealed</span> <span class="kd">interface</span> <span class="nc">Expression</span> <span class="o">{</span>
  <span class="n">record</span> <span class="nf">Addition</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Division</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Expression</span> <span class="n">right</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Number</span><span class="o">(</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
  <span class="n">record</span> <span class="nf">Variable</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="kd">implements</span> <span class="nc">Expression</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div> <p>Some example <code class="language-plaintext highlighter-rouge">Expression</code>s include <code class="language-plaintext highlighter-rouge">(a*10+b)/100</code> which corresponds to a AST that looks like:</p> <ul> <li>Division <ul> <li>Addition <ul> <li>Multiplication <ul> <li>Variable(“a”)</li> <li>Number(10)</li> </ul> </li> <li>Variable(“b”)</li> </ul> </li> <li>Number(100)</li> </ul> </li> </ul> <p>So, now we are ready to restate the question.</p> <blockquote class="block-warning"> <p><strong>Concrete strawman question</strong>: How to write a Calculator program where:</p> <ul> <li>The program implements a function <code class="language-plaintext highlighter-rouge">long evaluate(Expression input, VariableMap variables);</code> that evaluates the expression</li> <li>The program should be accompanied by tests</li> <li>The tests should give confidence that the implementation works</li> <li>The number of tests should be minimal</li> </ul> </blockquote> <h2 id="solution-attempt">Solution Attempt</h2> <p>It is natural to write a solution that looks like this:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">input</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">variables</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">;</span>
    <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">variables</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">+</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">*</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
    <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">variables</span><span class="o">)</span> <span class="o">/</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="n">variables</span><span class="o">);</span>
  <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div> <p>And follow it up with tests like</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>expect(11, "a+10", {a=1});
expect(12, "a*b", {a=3, b=4});
expect(203, "10*20+3", {});
</code></pre></div></div> <p>So far so good. But, the question remains: what tests to write &amp; how many of them to write. For example, are the following tests necessary?</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. expect(18, "a*b+(3*2)", {a=3, b=4});
2. expect_failure("a/b", {a=1, b=0});
3. expect_failure(10 + 12/b, {b=0});
</code></pre></div></div> <p>Each of these tests ostensibly tests something. #1 appears to test a complex expression, #2 appears to test a corner case, #3 appears to combine them both (corner case within a complex expression). The challenge is to be able to objectively say that a given number of tests are sufficient.</p> <h2 id="segmenting-the-tests">Segmenting the tests</h2> <p>After some reflection, it is natural to arrive at a segmentation of tests:</p> <table> <thead> <tr> <th style="text-align: left">Test Id &amp; Description</th> <th style="text-align: left">Examples <br/> Format: <strong>Test Name: Example</strong></th> <th style="text-align: left">Count</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><strong>[Per-node basic]</strong>. <br/> One basics test per Node type. The arguments have depth 1. <br/> Node can be Addition, Variable, Multiplication, Number, Division</td> <td style="text-align: left">Addition basic: <code class="language-plaintext highlighter-rouge">expect(11, 10+1, {})</code> <br/>Multiplication basic: <code class="language-plaintext highlighter-rouge">expect(20, 10*2, {})</code></td> <td style="text-align: left">O(#Nodes)</td> </tr> <tr> <td style="text-align: left"><strong>[Per-node corner case]</strong>. <br/> One test per corner case per node.</td> <td style="text-align: left">Division corner case: <code class="language-plaintext highlighter-rouge">expect_failure("1/0",{})</code></td> <td style="text-align: left">O(#Nodes)</td> </tr> <tr> <td style="text-align: left"><strong>[Complex arguments]</strong>. <br/> One test involving a complex expression, potentially involving all the operators</td> <td style="text-align: left">Complex arguments: <code class="language-plaintext highlighter-rouge">expect(5, 1*2+9/a, {a=3})</code></td> <td style="text-align: left">O(1), but unclear whether &amp; which ones to write</td> </tr> <tr> <td style="text-align: left"><strong>[Per-node Complex arguments]</strong>. <br/> One complex expression test per Node type</td> <td style="text-align: left">Addition complex arguments: <code class="language-plaintext highlighter-rouge">expect(22, 1*2+10*(1*2), {})</code> <br/> Multiplication complex arguments: <code class="language-plaintext highlighter-rouge">expect(15, (1+2)*(2+3), {})</code></td> <td style="text-align: left">O(#Nodes). Unclear whether to writes and if so, which ones to write</td> </tr> <tr> <td style="text-align: left"><strong>[Per-node Complex arguments arg depth = K]</strong>. <br/> One complex arguments test per Node type. At least one of the arguments has a depth K.</td> <td style="text-align: left">Addition complex arguments, arg depth=3: <code class="language-plaintext highlighter-rouge">expect(29, 1*2*3*4 + 5, {})</code></td> <td style="text-align: left">O(#Nodes). Unclear whether such tests should be written &amp; if so, what arg-depths are acceptable</td> </tr> </tbody> </table> <p><br/> In practice, different styles differ on whether to write <strong>[Per-node Complex arguments]</strong> test and what values of <code class="language-plaintext highlighter-rouge">K</code> are considered acceptable for <strong>[Per-node complex arguments, arg depth=K]</strong> tests.</p> <h2 id="this-strawman-is-robust">This strawman is robust!</h2> <p>Even this simple example of a Calculator demonstrates the inherent difficulty in deciding which tests to write.</p> <ul> <li>Without a meaningful segmentation of tests, we cannot answer whether there’s sufficient coverage and obtain confidence in the implementation.</li> <li>Even with a segmentation, it is unclear which test to write for each segment</li> </ul> <p>Segmentation is reasonable progress but we still haven’t answered which tests to write and why those tests give us confidence in the implementation.</p> <h2 id="skip-complex-argument-tests">Skip complex argument tests?</h2> <p>One might argue that complex arguments tests are not required because the code is recursively evaluating each child first and only passing its result to the parent operator. So, the complexity of the child argument is immaterial. This is certainly a reasonable argument &amp; in fact, one this post will make towards the conclusion. But, there are some important reasons to continue investigating further:</p> <ul> <li>[Special code structure] The testing strategy of skipping complex arguments is only valid when child evaluation results are passed to the parent <ul> <li>When a code base is touched by many people, this requirement can easily get lost</li> <li>Often, at the point when the original author moves on, the code has this structure but no one else knows that it has that structure</li> </ul> </li> <li>[Node complexity and cardinality] Even if all the code base authors are familiar with the code structure, a large number of node types and/or complex node evaluations can make it hard to maintain the structure <ul> <li>In the above example, we had 5 node types. In industrial strength applications - for e.g. translating a user query to sql - this factor can be more than 20</li> <li>Once we get above a few pages worth of the <code class="language-plaintext highlighter-rouge">evaluate</code> function, we’ll need tools to help ensure that we are always evaluating the children recursively before applying the parent’s operator</li> </ul> </li> </ul> <p>If only we had some tools to help us maintain the structure! Then, we can simply skip the complex argument tests with confidence.</p> <hr/> <h1 id="slaying-the-strawman">Slaying the strawman</h1> <p>How do we make progress? The primary cause of test subjectivity is the arg-depth of complex argument tests. We don’t know if a particular bug will be triggered only on arg depths of &gt;= 2 and in a particular traversal path through the Expression tree. So, it is reasonable to never fully feel confident that our code works for all possible depths while only testing a sample of depth 2.</p> <h2 id="dealing-with-arg-depth">Dealing with arg depth</h2> <blockquote> <p>One way to grapple with the arg depth question is to somehow make the arg depth immaterial i.e. complex argument tests will catch the same bugs regardless of arg depth.</p> </blockquote> <p>Let’s assume we can make arg-depth immaterial. What does it buy us? For a start, we can simply pick arg depth = 1. <code class="language-plaintext highlighter-rouge">Once we set arg depth = 1, [Per-node complex arguments arg depth = 1] is the same set of tests as [Per-node basic] tests. Remarkably, we can drop the complex argument tests w/o missing any coverage!</code> This is a sizeable reduction in the set of tests and contributes to the goal of reducing the number of tests.</p> <p>That’s promising. How do we make arg-depth immaterial? arg depth being immaterial means that the bugs found from arbitrary depths (ignore stack overflow) are the same bugs found at arg depth = 1. This suggests that the implementation function for a Node should not even have access to the child Nodes - if it did, the impl can become intricately dependent on the exact arg and a bug might be triggered on only a very specific tree <code class="language-plaintext highlighter-rouge">(Addition(Multiplication(Division)))</code> say and we wouldn’t know to test this particular tree. That is a bummer because <code class="language-plaintext highlighter-rouge">how can we implement the function if it can't even access the child Nodes?</code></p> <p>Perhaps surprisingly, there is a way to approach this. But first we need a detour in homomorphisms.</p> <h2 id="homomorphisms">Homomorphisms</h2> <p><a href="https://en.wikipedia.org/wiki/Homomorphism">Homomorphism</a> is an algebraic construct which essentially captures the following idea:</p> <blockquote class="block-tip"> <p><strong>Homomorphism in layman terms</strong> <br/> <br/></p> <p>Consider a function which evaluates Nodes in a Tree (or directed acyclic graph more generally)</p> <ul> <li>Example: functions like those in the strawman question: <code class="language-plaintext highlighter-rouge">long evaluate(Expression node, VariableMap vars)</code></li> <li>Such a function is either a homomorphism or not.</li> </ul> <p>It is a homomorphism if it has the following characteristics (to a good approximation)</p> <ul> <li>Each Node has a bunch of [possibly empty] child Nodes <ul> <li>Example: <code class="language-plaintext highlighter-rouge">Addition</code> Node has two children while <code class="language-plaintext highlighter-rouge">Number</code> Node has no children</li> </ul> </li> <li>Each Node type has a corresponding operator function <ul> <li>E.g. <code class="language-plaintext highlighter-rouge">SUM</code> is the operator function for <code class="language-plaintext highlighter-rouge">Addition</code> node, and <code class="language-plaintext highlighter-rouge">MULTIPLY</code> is the operator function for <code class="language-plaintext highlighter-rouge">Multiplication</code> node</li> <li>Note that this operator function cannot depend on the Node’s children. That is, Addition node will always have the same operator (<code class="language-plaintext highlighter-rouge">SUM</code>) regardless of its arguments.</li> <li>The operator function for a Node <code class="language-plaintext highlighter-rouge">Number(v)</code> is the zero-ary operator <code class="language-plaintext highlighter-rouge">v</code>; i.e. it’s a function which takes no arguments and always returns <code class="language-plaintext highlighter-rouge">v</code>. This is in contrast to the binary <code class="language-plaintext highlighter-rouge">SUM</code> function. In both cases, the Operator function is independent of children. Note that <code class="language-plaintext highlighter-rouge">v</code> is not a child of <code class="language-plaintext highlighter-rouge">Number(v)</code>, it is a configuration parameter, if you will.</li> </ul> </li> <li>The function’s evaluation of a Node is equivalent to applying the node’s operator function to the evaluated values of each of its children <ul> <li>That is, <code class="language-plaintext highlighter-rouge">Evaluate(Node(node params, child1, child2, ...)) := Node.operator(node params)(Evaluate(child1, child2, ..))</code></li> <li>That is, <code class="language-plaintext highlighter-rouge">Evaluate(Addition(left, right)) := SUM(Evaluate(left), Evaluate(right))</code></li> <li>Similarly, <code class="language-plaintext highlighter-rouge">Evaluate(Number(value)) := value() == value</code></li> </ul> </li> </ul> </blockquote> <h2 id="exploiting-homomorphisms">Exploiting Homomorphisms</h2> <p>Let’s start by noting that our Calculator’s <code class="language-plaintext highlighter-rouge">evaluate</code> function is a homomorphism.</p> <p>So what, you ask? Why do we care about Homomorphisms?</p> <ul> <li>Homomorphism has so much structure that it can be factored further</li> <li>Further factoring means we get to invoke one of the foundational principles of software engineering: separation of concerns</li> <li>The factors (aka concerns) are relatively straightforward too <ul> <li>Evaluating child Nodes</li> <li>Invoking the Node’s operator passing child node values as arguments</li> </ul> </li> <li>We can structure our code into two orthogonal pieces, one for each of the factors <ul> <li>Tests can be written for each of those orthogonal pieces <ul> <li>Tests that the correct Operator (like SUM) is being invoked with correct arguments</li> <li>Tests for each of the Operators</li> </ul> </li> <li>Alternatively, tests can be written just for publicly visible piece (the <code class="language-plaintext highlighter-rouge">evaluate</code> function) <ul> <li>This implicitly tests that the correct Operator is being invoked with the correct arguments</li> </ul> </li> </ul> </li> </ul> <p><strong>Code structure after separating the factors: Evaluating child nodes &amp; Invoking node operators</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// Since the thrust of this post is testing, we'll not comment on </span>
<span class="c1">// 1. Efficiency. For example, boxing, varargs overheads here. </span>
<span class="c1">//    There are many ways to mitigate them.</span>
<span class="c1">// 2. Error handling. What if dividing by 0? </span>
<span class="c1">//    Again, there are many options.</span>

<span class="kd">interface</span> <span class="nc">Operator</span> <span class="o">{</span>
  <span class="kt">long</span> <span class="nf">invoke</span><span class="o">(</span><span class="kt">long</span><span class="o">...</span> <span class="n">children</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Evaluator</span> <span class="o">{</span>
  
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">PLUS</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">MULTIPLY</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Operator</span> <span class="no">DIVIDE</span> <span class="o">=</span> <span class="n">vals</span> <span class="o">-&gt;</span> <span class="n">vals</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">vals</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

  <span class="c1">// This is our evaluate function implementation</span>
  <span class="kd">static</span> <span class="kt">long</span> <span class="nf">evaluate</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">operator</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">varMap</span><span class="o">)</span>
        <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">children</span><span class="o">(</span><span class="n">node</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">child</span> <span class="o">-&gt;</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">varMap</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">toArray</span><span class="o">());</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="nf">operator</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">,</span> <span class="nc">VariableMap</span> <span class="n">varMap</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">v</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">varMap</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">PLUS</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">MULTIPLY</span><span class="o">;</span>
      <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">DIVIDE</span><span class="o">;</span>
    <span class="o">};</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Expression</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="nc">Expression</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span><span class="o">(</span><span class="n">node</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nf">Number</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">();</span> <span class="c1">// empty</span>
      <span class="k">case</span> <span class="nf">Variable</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">();</span> <span class="c1">// empty</span>
      <span class="k">case</span> <span class="nf">Addition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Multiplication</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
      <span class="k">case</span> <span class="nf">Division</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
    <span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><br/></p> <p>With this structure, let’s examine the tests again</p> <ul> <li><strong>Per-node basic</strong> tests are required</li> <li><strong>Per-node corner case</strong> tests are required</li> <li>All other tests (e.g. complex arguments) can be skipped</li> </ul> <p>In particular, all other complex argument tests can be skipped. This is because composition is triggered even for the simplest evaluations. At this point, it is reasonable to ask: is this additional code worth it? isn’t it the same thing as the original attempt - just that the code is inline? Isn’t the original attempt more compact &amp; readable? All of these are legitimate questions that are answered in <a href="#why-prefer-a-homomorphic-impl">Why prefer a Homomorphic Impl</a>.</p> <h1 id="conclusion">Conclusion</h1> <p>See <a href="#summary-of-the-summary">Summary of the Summary</a>.</p>]]></content><author><name></name></author><category term="software-engineering"/><category term="software-testing"/><summary type="html"><![CDATA[How many tests to write? What tests to write? Can there be objective answers? Surprisingly, the answer is yes for a certain class of programs.]]></summary></entry><entry><title type="html">What is Money and where does it come from? An answer from symmetry.</title><link href="https://vemana.github.io/blog/2023/money-from-symmetry/" rel="alternate" type="text/html" title="What is Money and where does it come from? An answer from symmetry."/><published>2023-10-19T15:00:00+00:00</published><updated>2023-10-19T15:00:00+00:00</updated><id>https://vemana.github.io/blog/2023/money-from-symmetry</id><content type="html" xml:base="https://vemana.github.io/blog/2023/money-from-symmetry/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Ever wondered what money is and where it comes from?</p> <ul> <li>This question bugged me for years until symmetry came to the rescue</li> <li>This post chronicles the thought process behind arriving at a satisfactory answer</li> <li>The secret lay in posing a simpler, concrete question and attempting to answer it</li> </ul> <hr/> <h1 id="a-strawman-that-wasnt">A strawman that wasn’t</h1> <p>How to answer a daunting, nebulous question like <em>what is money?</em></p> <ul> <li>It helps to ask a simpler, concrete question and try to answer it</li> <li>My concrete question was <blockquote class="block-warning"> <p>What happens when the bank lends John Doe money for a mortgage?</p> </blockquote> </li> <li>This question turned out to be both deceptively difficult and incredibly insightful.</li> </ul> <p>If you poll a few people, arguments often proceed like this:</p> <table> <thead> <tr> <th style="text-align: left">Argument</th> <th style="text-align: left">Counter argument</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"> </td> <td style="text-align: left">What happens when the bank lends money to John Doe for a mortgage?</td> </tr> <tr> <td style="text-align: left">The bank has money and gave it to John in exchange for interest payments.</td> <td style="text-align: left">Where did the bank get that money?</td> </tr> <tr> <td style="text-align: left">Why, it came from deposits like salaries</td> <td style="text-align: left">Where did the money for salaries come from?</td> </tr> <tr> <td style="text-align: left">Why, that comes from company revenues</td> <td style="text-align: left">Where did the company get those revenues from?</td> </tr> <tr> <td style="text-align: left">Why, that comes from consumers</td> <td style="text-align: left">Where did consumers get that money from?</td> </tr> <tr> <td style="text-align: left">Why, that comes from company revenues</td> <td style="text-align: left">See the circularity?</td> </tr> <tr> <td style="text-align: left">What’s the problem? Circularity is fine</td> <td style="text-align: left">Circularity cannot explain the origin of the ‘first’ money.</td> </tr> <tr> <td style="text-align: left">So?</td> <td style="text-align: left">This explanation is unsatisfactory..</td> </tr> <tr> <td style="text-align: left">You overthink things..</td> <td style="text-align: left">Uhh? No. I don’t accept unsatisfactory explanations</td> </tr> </tbody> </table> <p>I am not willing to accept that somehow this circularity works itself out; for one thing it doesn’t explain the origin of the ‘first’ money. So, there has to be a better explanation.</p> <hr/> <h2 id="breaking-circularity-using-symmetry">Breaking circularity using Symmetry</h2> <p>The root of the circular argument appears to be the asymmetric nature of the mortgage transaction. Pay attention to how we describe it: <code class="language-plaintext highlighter-rouge">The bank gave John money</code>. This is an <a href="https://en.wikipedia.org/wiki/Asymmetric_relation">asymmetric relation</a> because if we swap the bank and John, the statement would no longer be true <code class="language-plaintext highlighter-rouge">John gave the bank money</code>.</p> <p>This observation prompts the key question:</p> <blockquote class="block-warning"> <p>How can we describe the mortgage transaction as a Symmetric relationship; that is, if we swap the Bank and John, the description should still be true ?</p> </blockquote> <p>My first attempt at answering this also turned out to be insightful.</p> <blockquote class="block-tip"> <p>The bank and John enter a contract. Alternatively, John and the Bank owe each other something. <br/> <br/> Note how the statement is symmetric. Swapping bank and John in the statement doesn’t change it!</p> </blockquote> <p>That’s symmetric alright. But, what do they owe each other? This line of inquiry proved productive.</p> <hr/> <h2 id="liabilities-contracts-and-assets">Liabilities, Contracts and Assets</h2> <p>The symmetric answer can be simply restated as: <strong>In any transaction like the mortgage, the two parties are exchanging obligations.</strong>.</p> <p>Upon some reflection, we can arrive at the following insights, which we’ll explore in this section:</p> <ul> <li>Everyone can create/make a promise aka obligation <ul> <li>Liability is just another name for this promise</li> <li>Liability is the most primitive economic unit in any society. It costs nothing to make a promise - the trouble is finding someone to accept your promise!</li> </ul> </li> <li>Two parties can decide to accept each other’s Liability <ul> <li>This exchange of liabilities is a Contract</li> <li>Economy runs on Contracts</li> </ul> </li> <li>One party’s liability is the other party’s asset <ul> <li>All your assets are somebody’s liabilities!</li> <li>This may be surprising, but it really is so! Some liabilities have such low performance risk we don’t even contemplate non-performance</li> </ul> </li> </ul> <hr/> <h3 id="common-liabilities">Common Liabilities</h3> <p>With this in mind, we are ready to probe some standard liabilities we encounter. For each liability, we should be able to ask:</p> <ul> <li>Who is the liability issuer?</li> <li>What does that liability promise?</li> <li>Is there a risk of non-performance?</li> </ul> <table> <thead> <tr> <th style="text-align: left">Liability</th> <th style="text-align: left">Issuer</th> <th style="text-align: left">Liability of the issuer</th> <th style="text-align: left">Non-performance Risk</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">US Govt. bond</td> <td style="text-align: left">US Treasury</td> <td style="text-align: left">A US Govt. bond pays interest &amp; principal to the holder at a pre-determined schedule</td> <td style="text-align: left">Missed payments and/or principal.</td> </tr> <tr> <td style="text-align: left">US Dollar</td> <td style="text-align: left">Federal Reserve (Fed)</td> <td style="text-align: left">If you present 10$, Fed promises to give you 2x5$ (as funny as it sounds). The other implicit obligation is that the US Govt. accepts it as legal tender for tax payments. So, in that sense, it is a co-liability between the Fed &amp; the Treasury. Other than that, there’s nothing that the Fed promises on its US$ liability to a good approximation. They can print more of it with relatively little interference.</td> <td style="text-align: left">The Fed itself can always perform (exchanging 10$ for 2x5$), but US Treasury may accept a competing legal tender, can abolish taxes reducing need for US$ etc</td> </tr> <tr> <td style="text-align: left">Apple Stock</td> <td style="text-align: left">Apple Corporation</td> <td style="text-align: left">Apple corp promises to share dividends equally across all equity holders &amp; guarantees equal voting rights. Note: There’s no promise that any dividends will be paid - it only legally guarantees equal share in dividends and voting.</td> <td style="text-align: left">Unlikely, but legal changes may allow Apple Corporation to discrimnate between equity holders, preferentially paying dividends to only a few, for e.g.</td> </tr> <tr> <td style="text-align: left">Apple Corporate Bond</td> <td style="text-align: left">Apple Corporation</td> <td style="text-align: left">Similar to any bond: Apple Corp promises to pay interest &amp; principal at a predetermined schedule.</td> <td style="text-align: left">Missed payments and/or principal</td> </tr> <tr> <td style="text-align: left">Chair</td> <td style="text-align: left">Chair manufacturer</td> <td style="text-align: left">The chair allows you to sit on it for some number of years.</td> <td style="text-align: left">Chair doesn’t work as advertised or breaks down quickly etc.</td> </tr> <tr> <td style="text-align: left">Gold</td> <td style="text-align: left">Mother nature</td> <td style="text-align: left">It’s chemical properties of conductivity &amp; inertness will be maintained through millennia; new Gold can only be synthesised in supernovae, etc. There’s no guarantee from mother nature that Gold will be valued at a certain US$ price or higher over time. That is a human group-think phenomenon.</td> <td style="text-align: left">This is a tricky one. Gold’s properties are not directly guaranteed by mother nature (we can’t sue her!), but reflect our current understanding. It is entirely possible that humans misunderstood mother nature and discover later on that Gold has a half life and /or can be synthesized in lab, both of which will erode some of its important properties</td> </tr> <tr> <td style="text-align: left">Bitcoin</td> <td style="text-align: left">Bitcoin Network</td> <td style="text-align: left">A mined bitcoin will be perpetually verifiable and new bitcoins will only be issued using an algorithm.</td> <td style="text-align: left">Similar to gold, there’s no party to sue. It is entirely possible that the mining network suffers a Byzantine attack.</td> </tr> <tr> <td style="text-align: left">Laws of Physics</td> <td style="text-align: left">Mother nature</td> <td style="text-align: left">The Laws of physics work similarly everywhere</td> <td style="text-align: left">It is possible that humans understand some laws incorrectly; that is a human fault not really mother nature’s. But this is also a sort of co-liability: humans try to understand mother nature’s rules with the expectation that such rules indeed exist.</td> </tr> <tr> <td style="text-align: left">Checking account at JPM</td> <td style="text-align: left">JP Morgan Bank</td> <td style="text-align: left">On demand, you can withdraw US$ upto your account limit</td> <td style="text-align: left">JPM does not let you withdraw US$ on demand</td> </tr> <tr> <td style="text-align: left">Checking account at BofA</td> <td style="text-align: left">BofA</td> <td style="text-align: left">On demand, you can withdraw US$ upto your account limit</td> <td style="text-align: left">BofA does not let you withdraw US$ on demand</td> </tr> </tbody> </table> <blockquote class="block-warning"> <p><strong>Note</strong>: US$ is still Fed’s liability. JPM cannot print it. So, when John Doe withdraws US$ from a checking account, JPM has to fetch the US$ from the Fed to give it to John Doe. JPM’s checking account merely promises that on-demand it will be able to obtain those US$. It is entirely possible that JPM fails to honor this promise. So, 100$ in JPM checking account is not the same thing as 100$ in BofA checking account. All you have in the checking account is the respective banks’ promises and NOT US$.</p> </blockquote> <blockquote class="block-warning"> <p><strong>Note</strong>: ALL liabilities carry a non-performance risk. In some cases like a Chair or a Checking Account, it is easy to imagine non-performance. In other cases like US$, it is harder to imagine, but a non-performance risk absolutely exists.</p> </blockquote> <p>We colloquially say <strong>printing</strong> when an Issuer issues liabilities. For example, Apple can print more stock and dilute existing stock. Similarly, the Fed can print more US$ and dilute the existing US$.</p> <hr/> <h3 id="contracts-exchange-of-liabilities">Contracts: Exchange of Liabilities</h3> <p>Contracts are just an exchange of liabilities. Typically there are two parties. Some examples to illustrate.</p> <table> <thead> <tr> <th style="text-align: left">Contract</th> <th style="text-align: left">Party 1 &amp; Obligation</th> <th style="text-align: left">Party 2 &amp; Obligation</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">$1M Mortgage between JPM and John Doe</td> <td style="text-align: left">JPM promises to increase John Doe’s checking account by $1M</td> <td style="text-align: left">John Doe promises to pay interest &amp; principal per agreement.</td> </tr> <tr> <td style="text-align: left">Aging parent &amp; child (provocative to showcase the nature of contracts)</td> <td style="text-align: left">Parent promises to bequeath wealth upon passing.</td> <td style="text-align: left">Child promises to take care of parent in advanced years.</td> </tr> </tbody> </table> <hr/> <h3 id="assets-somebodys-liabilities">Assets: Somebody’s liabilities</h3> <p>A contract is simply an exchange of liabilities. However, it creates both an asset and liability for both parties. In fact, <strong>all assets are somebody’s liabilities</strong>.</p> <p>Consider the $1M mortgage example</p> <table> <thead> <tr> <th style="text-align: left">Party</th> <th style="text-align: left">Liability</th> <th style="text-align: left">Asset</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">JP Morgan</td> <td style="text-align: left">Increment John Doe’s checking account by $1M</td> <td style="text-align: left">John Doe’s future interest &amp; principal payments</td> </tr> <tr> <td style="text-align: left">John Doe</td> <td style="text-align: left">Future interest &amp; principal payments</td> <td style="text-align: left">$1M in Checking account</td> </tr> </tbody> </table> <p>As you can see, the contract confers both an asset and a liability to both parties. This is the basis of double-entry book-keeping.</p> <hr/> <h2 id="no-more-circularity">No more circularity</h2> <p>The fundamental unit of the economy is contracts. Something as simple as buying a chair involves a contract. John Doe sends US$ (Fed’s liability) and the manufacturer sends the chair (manufacturer’s liability) with a promise that it will work as advertised. If the chair doesn’t, it perhaps comes with a warranty which is analogous to credit risk in a bond.</p> <p>Most money is just bank credit &amp; it gets created by a bank on demand. For example, when John buys a chair using his credit card, JPM simply creates a liability for John and credits the chair manufacturer’s checking account. No US$ is involved at all.</p> <p>There’s a bit more to this story, including what happens when the chair manufacturer’s account is in BofA &amp; John’s card is JPM - it does involve transferring US$ (so called reserves) from JPM to BofA but in the background.</p> <blockquote class="block-tip"> <p>The economy is NOT dependent on a circular rotation of some limited resource called money, but it progresses via a SEQUENCE of contracts. There’s no confusion on how money’s circulating - it is not going round &amp; round; it is just being created freshly. New contracts (e.g. credit) may be created to service old contracts.</p> </blockquote> <h2 id="illustration-treasury-transfer-payments">Illustration: Treasury Transfer payments</h2> <p>What happens when the Treasury makes transfer payments (i.e. free distributions) to citizens? To a good approximation, this is what happens</p> <ul> <li>The Treasury holds its checking account with the Fed. It’s called TGA (Treasury General Account)</li> <li>Treasury instructs the Fed to transfer $1000 from its TGA to JPM for the benefit of John Doe</li> <li>Fed transfers $1000 from TGA to JPM</li> <li>JPM credits $1000 to John Doe’s checking account</li> </ul> <p>You may have noticed that there are a bunch of uni-directional transfers which contradicts our insistence that each Contract (or Transaction) is an exchange of Liabilities! It turns out that our theory correctly predicts the existence of offsetting liabilities. So, I depict each transaction as an exchange of liabilities. The <em>fictional</em> Goodwill liability of John Doe is quite a standard accounting entity.</p> <blockquote class="block-danger"> <p>Note: This is an approximation to help our understanding. The actual balance sheet entries are likely different.</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Treasury-Transfer-to-John-Doe-Balance-sheet-impact.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Treasury-Transfer-to-John-Doe-Balance-sheet-impact.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Treasury-Transfer-to-John-Doe-Balance-sheet-impact.svg-1400.webp"/> <img src="/assets/img/Treasury-Transfer-to-John-Doe-Balance-sheet-impact.svg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <hr/> <h1 id="so-whats-money">So, what’s Money?</h1> <p>After that understanding of contracts &amp; liabilities, we can now answer what Money is.</p> <blockquote class="block-tip"> <p>To a good approximation,</p> <ul> <li>Money just includes a subset of liabilities of banks and the Federal Reserve</li> <li>Banks &amp; Fed are special institutions: Banks create new deposit liabilities via loans and Federal Reserve creates US$ liabilities</li> <li>There are different measures of money, M1, M2 etc and they each pick a different subset of bank &amp; Fed liabilities to include. The details are not important for us right now.</li> </ul> </blockquote> <p>Even though banks are special in terms of regulation, banking itself is not. Setting aside regulations,</p> <ul> <li>John Doe can maintain his own ledger of checking accounts like a bank if enough customers believe in his ability to on-demand pay them</li> <li>John Doe can also issue loans (again, just a matter of keeping accounts) if enough people believe in his ability to on-demand pay their checking accounts</li> <li>Banks just happen to be certified institutions and operate under important constraints on how many loans they can dole out among others.</li> </ul> <hr/> <h1 id="faq">FAQ</h1> <h2 id="can-we-say-that-the-fed-is-the-origin-of-money-since-it-can-print-us-without-much-restriction">Can we say that the Fed is the origin of money since it can print US$ without much restriction?</h2> <p>No. Economies existed long before the Fed and long before banks (barter system). A barter era contract might’ve looked like: <code class="language-plaintext highlighter-rouge">I promise to receive 1 bag of rice an year from now and deliver 1/2 bag of sugar 6 months from now</code>.</p> <p>One might ask, how can someone confidently make a contract to produce rice - where does this rice come from? The rice producer is bartering with the sugar producer on the one side, but on the other side is entering a contract with mother nature. Mother nature’s liability is to produce rice while the farmer’s liability is to work the land in a certain way (i.e. rice farming) that she dictates.</p> <h2 id="what-was-bank-operation-like-pre-fed">What was bank operation like, pre Fed?</h2> <p>Pre-Fed, to a decent approximation, Gold was the only money. Everything else was credit. The distinction was very clear and showed in bank operations.</p> <p>In that era, a typical bank may have had</p> <ul> <li>Assets of 100 ozs. 10 ozs of gold + 90 ozs worth of mortgages</li> <li>Liabilities of 100 ozs of deposits</li> <li>Note: Gold is measured in ozs (no US$ here)</li> </ul> <p>If even a small % of outstanding credit defaults, depositors can lose all their money. Suppose this bank loses 20 ozs worth of mortgages, its balance sheet becomes</p> <ul> <li>Assets: 10 oz. of gold + 70 ozs worth of mortgages</li> <li>Liabliities: 100 ozs of deposits</li> <li>So, there’s no way this bank can make whole on the deposits</li> <li><span class="red-text">This causes a bank run</span> and frequent bank runs were a feature of the pre-Fed era</li> </ul> <p>If you wanted to transfer 1 oz. of Gold (i.e. money) from your account in bank A to your account in bank Z, the process would be roughly:</p> <ul> <li>Bank A deducts 1 oz. from your account</li> <li>Bank A physically sends 1 oz. to bank Z at the end of the day to credit to your account</li> <li><span class="red-text">So, a physical transfer of Gold was necessary to move money between accounts</span></li> </ul> <blockquote class="block-warning"> <p>Very important note: This system of Gold as money worked on the fundamental idea that Gold was scarce &amp; could not be created.</p> </blockquote> <h2 id="fed-creation">Fed creation</h2> <p>To a decent approximation, Fed was created as literally a big pile of Gold, a Reserve of Gold</p> <ul> <li>To lend Gold as a last resort in a panic bank run situation</li> <li>Once the panic subsides, the bank can pay back the Fed</li> <li>This Gold is also known as Reserve, the same term we use for (not backed by Gold) today</li> </ul> <p>US$</p> <ul> <li>The Fed issued the <code class="language-plaintext highlighter-rouge">US$</code>, also called the <code class="language-plaintext highlighter-rouge">Federal Reserve Note</code> (Note: A <code class="language-plaintext highlighter-rouge">Note</code> is just a promise)</li> <li>It was backed by the Gold they had in Reserve</li> <li>1 US$ could be presented at the Fed and redeemed for 1 oz. of Gold</li> <li>Being paper, it was easier to carry around than Gold</li> <li>It replaced all the other <code class="language-plaintext highlighter-rouge">Bank Notes</code> <ul> <li>Previously, each Bank would issue their own <code class="language-plaintext highlighter-rouge">Note</code> as a form of currency</li> <li>So, there were many different Bank Notes in society</li> <li>If a bank was in trouble, no body would accept that bank note at full value</li> </ul> </li> </ul> <p>Bank Gold transfers moved to a hub &amp; spoke model.You can think of it as:</p> <ul> <li>Each bank has an account at the Fed, called the Reserve Account</li> <li>The Reserve Account holds Gold</li> <li>Instead of Bank A sending physical Gold to Bank Z, the Fed deducts from Reserve Account of A and credits it to B. No physical gold needs to move</li> </ul> <h2 id="gold-standard-relics">Gold standard relics</h2> <p>Mission Creep. A typical strategy for all business goes like this:</p> <ul> <li>Somehow gain customers</li> <li>Become a monopoly</li> <li>Wait until customers are used to your product, other competitors almost non-existent</li> <li>Raise prices</li> </ul> <p>The same thing happened with the Federal Reserve and the US$. To a decent approximation,</p> <ul> <li>The US$ replaced all individual Bank Notes</li> <li>It was first promised as 1 US$ == 1 oz. of Gold but in 1933, the Govt. devalued it so that 1 US$ = 0.03 oz. of Gold (<code class="language-plaintext highlighter-rouge">1/35</code> to be precise)</li> <li>You could still redeem US$ for Gold, but at this reduced price</li> <li>In 1971, the tie between US$ and Gold was completely severed. You could no longer exchange US$ for Gold</li> <li>So, the Govt. (technically the Fed) can now print US$ as much as it wants and raise prices on citizens</li> <li>Seems similar to the monopoly playbook?</li> </ul> <p>Today, transferring from Bank A to Z works similarly except</p> <ul> <li>The Reserve Account is no longer Gold, it is an ethereal thing called US$ (or a Fed liability)</li> <li>Crucially, there is no more Gold and the Fed can print its replacement</li> </ul> <p>Many people still talk about US Govt. debt as being repaid</p> <ul> <li>They mean it in a Gold standard sense. You loan 100 oz.s to Govt &amp; you expect to get paid the 100 ozs</li> <li>But, in a world with freely printable reserves, it works differently <ul> <li>The Govt. borrows 100 US$ today and promises to pay it back next year</li> <li>If it can’t pay, it will borrow more and repay using the boroowed funds</li> <li>If private citizens don’t want to lend to Govt., it can (indirectly) compell the Fed to print US$ and lend. This process is called Quantitative Easing</li> <li>So, the US Govt. can literally pay all its debts back; the only cost is inflation</li> <li>You will get your 100 US$ next year, just that it won’t buy as much as 100$ this year</li> </ul> </li> </ul> <blockquote class="block-warning"> <p>There are some important nuances that I left out. The Fed is ostensibly an independent entity but the US President nominates the Fed Chairman of the Board of Governors. They can choose not to print US$ to lend to the Govt, but it will typically end up violating their dual mandate: Stable Employment and Stable prices. So, when the Govt. gets into trouble with debt repayment, employment gets into trouble as well and the Fed will end up cheapening the currency to turn the economy back (per their dual mandate); they cheapen it typically by reducing interest rates or by outright Quantitate Easing.</p> </blockquote> <h2 id="what-is-the-contract-between-the-banks-and-the-fed">What is the contract between the banks and the Fed?</h2> <p>There is no natural reason for the Fed and Banks to be tied together. But, they are today because of current and historical regulations. There’s a lot of detail here but that’s not relevant for this post.</p> <h1 id="outro">Outro</h1> <p>Phew, that was a lot. This section starts with a recap and concludes with some takeaways and follow-up questions.</p> <h2 id="recap">Recap</h2> <p>A quick recap of the entire thought process from beginning to end</p> <ul> <li>I started with the question <code class="language-plaintext highlighter-rouge">What is money?</code></li> <li>To make progress, I asked a strawman question <code class="language-plaintext highlighter-rouge">What happens when John Doe takes a mortgage?</code></li> <li>Even after more than an year of pondering on and off, I couldn’t answer the strawman convincingly</li> <li>Eventually, I added a constraint: any answer to this question must be symmetric in John &amp; Bank - swapping them should not change the answer</li> <li>As it turned out, this symmetry constraint unlocked the whole mystery &amp; within a matter of an hour, the primary concepts all became clear</li> </ul> <blockquote class="block-tip"> <h2 id="takeaways">Takeaways</h2> <ul> <li>A Liability is just a promise - everybody can create one, but it acquires value only when it can be exchanged for another liability. This exchange of Liabilities is a Contract. <ul> <li>For every liability, there is a clear <strong>Issuer</strong> and a clear definition of what the liability entails</li> <li>US$ is the Fed’s liability, not the US Govt.’s. Fed is ostensibly an independent entity distinct the US Govt</li> <li>It just so happens that most human contracts (like mortagages) are written in US$; they could also be written in any other liability, like Gold, Bitcoin or JPM Checking Account etc.</li> </ul> </li> <li>Your assets are always somebody else’s liabilities <ul> <li>100 US$ in JPM checking account is not the same as 100 US$ in BofA checking account - they are both liabilities of the respective banks</li> <li>Human knowledge of natural sciences is a fantastic asset because it is mother nature’s liability which she honors in eternity with close to 0 performance risk. Most human contracts are very limited in their time. There’s a risk that humans misunderstood the liability (for e.g. Newton’s laws are inaccurate), but that is not mother nature’s responsibility</li> </ul> </li> <li>Democracy and mass bankruptcy are incompatible <ul> <li>When a large pct of population is unable to honor their contracts (like mortages), Democracy votes (indirectly) for reducing the contract burden</li> <li>Since most contracts are written in US$, cheapening US$ makes it easier to honor the contract</li> <li>Naturally, all Democratic Fiat currencies tend to 0 over time</li> <li>Since they cannot be cheapened on demand, hard currencies like Gold &amp; Bitcoin can force massive bankruptcies &amp; recessions; this appears to be the lived history on the Gold standard.</li> </ul> </li> </ul> </blockquote> <h2 id="follow-up-questions">Follow-up questions</h2> <p>Armed with this knowledge, we can ask a bunch of follow-up questions. We can offer very reasonable answers to these questions but they are posts in their own right.</p> <ul> <li>What is a good economy? <ul> <li>Hint: One that’s confidently entering a lot of contracts!</li> </ul> </li> <li>Is bitcoin better than US$ for the economy? <ul> <li>Hint: Does it help enter more contracts? What happens during a recession - is it good or bad that Fed can print US$?</li> </ul> </li> <li>What is Quantitave Easing? <ul> <li>Is it a good or bad experiment? Hint: QE involves Fed printing US$ and buying US Treasuries and private citizen Mortgage obligations.</li> </ul> </li> <li>Why do most people still talk about money in “lender/receiver” terms when there’s just a contract? <ul> <li>Hint: It is a relic of the Gold standard. Gold was the only money at some point and a loan amounted to transferring Gold from the bank to the person.</li> </ul> </li> <li>Will a Govt. ever pay back its debt? <ul> <li>Hint: No, not in the way a Gold based debt would need to be paid back.</li> </ul> </li> <li>What do analysts mean when they say <code class="language-plaintext highlighter-rouge">cash on the sidelines</code>? <ul> <li>Hint: this is an oxymoron!</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="finance"/><category term="symmetry"/><summary type="html"><![CDATA[Demanding a symmetric explanation offers insight.]]></summary></entry></feed>